#!/bin/bash
#
# SCRIPT: NAME_of_SCRIPT
# AUTHOR: AUTHORS_NAME
# DATE: DATE_of_CREATION
# REV: 1.1.A (Valid are A, B, D, T, and P)
#			 (For Alpha, Beta, Dev, Test, and Production)
#
# PLATFORM: (SPECIFY: AIX, HP-UX, Linux, OpenBSD, Solaris
#			 			or Not platform dependent)
#
# PURPOSE: Give a clear, and if necessary, long, description of the purpose of the
#		   shell script. This will also help you stay focused on the task at hand.
# 
# REV LIST:
#		DATE: DATE_of_REVISION
#		BY: AUTHOR_of_MODIFICATION
#		MODIFICATION: Describe what was modified, new feautures, etc--
#
#
# set -n  #Uncomment to check script syntax, without execution.
#		  #NOTE: Do not forget to put the comment back in or
# 		  #			the shell script will not execute!
# set -x  #Uncomment to debug this shell script
#
###############################################################################################
#		DEFINE FILES AND VARIABLES HERE
###############################################################################################

                          ###################
                          # MENUS
                          ###################
#Save file path 
Set-Variable path -Value "C:\Users\D0591\Documents"
#"C:\Users\D0591\Documents"

#banner
$banner = 
"********************************************************************************************
********************************************************************************************
        spufisps
      spifuspufis
    spufispufispuf  spufispufispufs   spufi    spufi spufispufispufi spufispufispufi
   spufispufispufi  spufispufispufis  spufi    spufi spufispufispufi spufispufispufi
  spufi        spu  spufi       spufi spufi    spufi spufi               spufi
  spufi             spufi       spufi spufi    spufi spufi               spufi
   spufispu         spufi      spufi  spufi    spufi spufi               spufi
    spufispufi      spufispufispufi   spufi    spufi spufispufi          spufi
        spufispu    spufispufispuf    spufi    spufi spufispufi          spufi
           spufis   spufi             spufi    spufi spufispufi          spufi
         spufispu   spufi             spufi    spufi spufi               spufi
 spu     spufispu   spufi             spufis  spufis spufi               spufi
spufispufispufi     spufi             spufispufispuf spufi           spufispufispufi
spufispufispuf      spufi             spufispufispuf spufi           spufispufispufi
 spufispufisp                      
  spufispuf  
********************************************************************************************
********************************************************************************************                                                  
"

$script:spaceBanner =
"

##################################################
#SPUFI SPUFI SPUFI SPUFI SPUFI SPUFI SPUFI SPUFI #
##################################################

"

#Main Menu
$mainMenu = 
    "
Please make a salection:

1. Deficiencies
2. Training
3. Accounts
4. Set file to LA
5. SRR
6. SSN Corrections
7. Ownership
8. Exit

    "

#Hidden $ Due Def Menu
$simpleFilesMenu =
"
1. Add File
2. Stop Adding/ Create SPUFI
3. Show Files in List
4. Clear List
5. Exit
"

#REG BI Credits Menu
$RegBICreditsMenu = 
"
1. Add State Credit
2. Add Home State Credit
3. Add Both
4. Exit
"

#NAIC Course Menu
$naicCourse_Menu=
"
1. Original 4 hr NAIC Training
2. New 4 hr Enhanced NAIC Training
3. New 1hr Enhanced NAIC Supplemental Training
"

 #credits menu
 $trainingCreditsMenu =
"
Please make a selection

1. AGP	I2 	IA2  
2. AGP	V1 	VA1  -- AIG VARIABLE ANNUITIY TRAINING
3. AIG	F1 	FA1   -- AIG Fixed Annuities
4. AIG	F2 	FA2   -- AIG Assured Edge
5. AIG	F3 	FA3  
6. AIG	IA 	IA1  
7. AIG	IA 	IA2  -- AIG Indexed Training 
8. AIG	IA 	1A1  
9. AIG	IA 	1A2  
10. AIG	I2 	IA2  
11. AIG	I3 	IA3  -- Corebridge IA3
12. AXA	VA 	VA1  
13. AXA	VA1	NY187
14. AXA	VI 	VA1  
15. AXA	V1 	VA1  -- EQUITABLE EQUIVEST
16. AXA	V1 	VA2  
17. AXA	V1 	VA3  -- Equitable Cornerstone  
18. AXA	V2 	403B -- AXA 403(B) Variable Annuity Course V2  
19. AXA	V3 	EQDD -- AXA/Equitable Dual Direction  
20. AXA	V3 	SCS  -- Equitable Structured Capital Strategies  
21. AXA	V3 	VA3  
22. AXA	V5 	E1DD 
23. ILV	VA 	ILVA -- PRIMERICA BROKER DEALER INDEXED LINKED VARIABLE ANNUITIES  
24. LIN	IA 	IA1  -- LINCOLN INDEXED ANNUITY TRAINING
25. LIN	I2 	IA1  
26. LIN	I2 	IA2  
27. LIN	VA 	VA1 --  Lincoln Variable Training  
28. LIN	VA 	VA3  
29. LIN	V1 	VA1  
30. LIN	V2 	VA2  -- Lincoln Level Advantage 
31. LIN	V4 	VA1  
32. MET	FA 	FA1   -- Brighthouse Fixed Annuity
33. MET	VA 	VA1  -- Brighthouse Prime Options/Brighthouse Variable  
34. MET	VA 	VA2  
35. MET	V1 	VA1  
36. MET	V2 	VA2 -- Brighthouse Shield training 
37. PRI	NY 	NY187
38. Broker Dealer Suitability Training
39. Exit
 "

#training course Menu
$creditsMenu =
"
1. Add Course credits
2. Remove Course credits
3. Send ADD File
4. REG BI Credits
5. Main Menu
 "

#accounts Main menu
$accountsMainMenu = 
"
1. Update/Delete/Insert Fees
2. Remove Rejected Payment Method Rows
3. Void Refund Checks
4. Cancel Chargebacks
5. Exit
"

#fees menu
$feesMenu = 
"
1. Update Fee
2. Delete Fee
3. Insert Fee
4. Exit
"

#SRR menu
$srrMenu =
"
1. Remove Notes
2. Send file to B7 11
3. Exit
"

#fee options
 $feeOptions = 
 "
1. PFSFEE
2. BASFEE
3. OTHER
 "

$caseStatuses =
"
1. APL
2. IPR
"

 #ssn corrections menu
 $ssnCorrectionsMenu =
 "
1. Bogus SSN orrection
2. Double Agent correction
3. New SSN correction
4. Update SSN only
5. Exit
 "

#SSN CORRECTIONS MENU
$appTables =
"
1. APP 100
2. APP 102
3. APP 201
4. APP 213
5. APP 267
6. APP 300
7. APP 318
8. APP 101
9. EXIT
 "

#app100 Tables
$app100Tables =
"
1. CLIENT_INFO
2. CLIENT_LICENSE
3. CLIENT_TO_AGENT
4. OPTIONAL TABLES
5. EXIT
"

#app 100 optional tables
$app100OptionalTables =
"
1. CANADA
2. SRR
3. EXIT
"

#app102 Tables
$app102Tables =
"
1. ACF_FLO_CONTROL
2. RCF_FIELD_TRANS
3. RECRUIT_CONTRACT
4. RECRUIT_DATA
5. RECRUIT_PRODUCT
6. STATE_LIC_ADDRESS
7. STATE_LIC_APP
8. STATE_LIC_CLIENT
9. STATE_LIC_DEF_RESP
10. STATE_LIC_DEMOGRAPH
11. STATE_LIC_MONY_ACT
12. STATE_LIC_REC_NOTE
13. STATE_LIC_TEMP
14. OPTIONAL TABLES
15. EXIT
"

#app 102 optional tables
$app102OptionalTables =
"
1. ACF_BACKGROUND_CHK
2. CLIENT_COURSE_HIST
3. IBA_TEMP_AGENT_ID
4. STATE_LIC_CHKLST
5. STATE_LIC_REFUNDS
6. STATE_LIC_RET_ITEM
7. STATE_LIC_SPOUSE
8. STATE_LIC_QUESTION
9. EXIT
"

#duplicate forms
$duplicateForms =
"
1. CONFAPPR and CONFLICT
2. PFSFEE
3. SRRFORM
4. ALL
5. NONE
"

#app201 Tables
$app201Tables =
"
1. AGENT_RECRUIT_TRX
2. RECRUIT_MANUAL_TRX
3. EXIT
"

#app213 Tables
$app213Tables =
"
1. PFA_RECRUIT_TRACK
2. PFA_RECRUIT_DETAIL
3. COMMON_AGENT
4. ACF_COMMON_AGENT
5. OPTIONAL (FIELD_TRAINING_DETAILS)
6. EXIT
"

#app267 Tables
$app267Tables =
"
1. RECRUIT_TRACK
2. RECRUIT_HISTORY
3. RECRUIT_DETAIL
4. EXIT
"

#app300 Tables
$app300Tables =
"
1. ACF_AGREEMENT
2. ACF_AUDIT_HISTORY
3. ACF_BALANCES
4. ACF_CONTRACT
5. ACF_CONTROL
6. ACF_HISTORY
7. ACF_TITLE_HISTORY
8. ACFME_BALANCES
9. EXIT
"

#app318 Tables
$app318Tables =
"
1. HMI_CONTROL
2. HMI_LICENSE
3. EXIT
"

#APP 101 Tables
$app101Tables = 
"
1. TBL_STUDENT
2. EXIT
"

#tables
$script:tableName

#A
$acf_Flo_Control = "DB2PROD.ACF_FLO_CONTROL"
$acf_Flo_Control_Canada = "DB2CPRD.ACF_FLO_CONTROL"
$acf_Flo_History = "DB2PROD.ACF_FLO_HISTORY"
$acf_Agreement = "DB2PROD.ACF_AGREEMENT"
$acf_Audit_History = "DB2PROD.ACF_AUDIT_HISTORY"
$acf_Background_Chk = "DB2PROD.ACF_BACKGROUND_CHK"
$acf_Balances = "DB2PROD.ACF_BALANCES"
$acf_Common_Agent = "DB2PROD.ACF_COMMON_AGENT"
$acf_Contract = "DB2PROD.ACF_CONTRACT"
$acf_control = "DB2PROD.ACF_CONTROL"
$acf_Course_Hist = "DB2PROD.ACF_COURSE_HIST"
$acf_History = "DB2PROD.ACF_HISTORY"
$acf_Title_History = "DB2PROD.ACF_TITLE_HISTORY"
$acfme_Balances = "DB2PROD.ACFME_BALANCES"
$agent_Recruit_Trx = "DB2PROD.AGENT_RECRUIT_TRX"

#C
$client_Info = "DB2PROD.CLIENT_INFO"
$client_License = "DB2PROD.CLIENT_LICENSE"
$client_To_Agent = "DB2PROD.CLIENT_TO_AGENT"
$common_Agent = "DB2PROD.COMMON_AGENT"

#F
$filed_Training_Bonus = "DB2PROD.FIELD_TRAINING_BONUS"
$filed_Training_Details = "DB2PROD.FIELD_TRAINING_DATAILS"

#H
$hmi_Control = "DB2PROD.HMI_CONTROL"
$hmi_License = "DB2PROD.HMI_LICENSE"

#I
$iba_Temp_Agent_Id = "DB2PROD.IBA_TEMP_AGENT_ID"

#L
$lic_Agent_Training = "DB2PROD.LIC_AGENT_TRAINING"

#P
$pfa_Recruit_Detail = "DB2PROD.PFA_RECRUIT_DETAIL"
$pfa_Recruit_Track = "DB2PROD.PFA_RECRUIT_TRACK"

#R
$rcf_Field_Trans = "DB2PROD.RCF_FIELD_TRANS"
$recruit_Contract = "DB2PROD.RECRUIT_CONTRACT"
$recruit_Data = "DB2PROD.RECRUIT_DATA"
$recruit_Detail = "DB2PROD.RECRUIT_DETAIL"
$recruit_History = "DB2PROD.RECRUIT_HISTORY"
$recruit_Manual_Trx = "DB2PROD.RECRUIT_MANUAL_TRX"
$recruit_Product = "DB2PROD.RECRUIT_PRODUCT"
$recruit_Track = "DB2PROD.RECRUIT_TRACK"

#S
$srr_Cases = "DB2PROD.SRR_CASES"
$srr_Email_Requests = "DB2PROD.SRR_EMAIL_REQUESTS"
$state_Lic_Address = "DB2PROD.STATE_LIC_ADDRESS"
$state_Lic_Annuities = "DB2PROD.STATE_LIC_ANNUITIES"
$state_Lic_App = "DB2PROD.STATE_LIC_APP"
$state_Lic_Chklst = "DB2PROD.STATE_LIC_CHKLST"
$state_Lic_Client = "DB2PROD.STATE_LIC_CLIENT"
$state_Lic_Def_Resp = "DB2PROD.STATE_LIC_DEF_RESP"
$state_Lic_Demograph = "DB2PROD.STATE_LIC_DEMOGRAPH"
$state_Lic_Mony_Act = "DB2PROD.STATE_LIC_MONY_ACT"
$state_Lic_Pay_Meth = "DB2PROD.STATE_LIC_PAY_METH"
$state_Lic_Proc_Doc = "DB2PROD.STATE_LIC_PROC_DOC"
$state_Lic_Question = "DB2PROD.STATE_LIC_QUESTION"
$state_Lic_Rec_Note = "DB2PROD.STATE_LIC_REC_NOTE"
$state_Lic_Refunds = "DB2PROD.STATE_LIC_REFUNDS"
$state_Lic_Ret_Item = "DB2PROD.STATE_LIC_RET_ITEM"
$state_Lic_Temp = "DB2PROD.STATE_LIC_TEMP"
$state_Lic_Spouse = "DB2PROD.STATE_LIC_SPOUSE"
$state_Naic_Training = "DB2PROD.STATE_NAIC_TRAINING"

#T
$tbl_Student = "DB2PROD.TBL_STUDENT"



#columns
$cript:column1
$script:column2
$script:column3
$script:column4
$script:column5
$script:column6
$script:column7
$script:column8
$script:column9
$script:column10
$script:column11
$script:column12
$script:column13
$script:column14
$script:column15

#select statement
$script:action
$script:selectStatement
$script:insertStatement
$script:updateStatement
$script:deleteStatement

#prompValue
$prompt
#options Roaster for menu
$script:possibleValues

#change counter
$script:counter
#indicator
$script:counterIndicator
#counter for whole SPUFI
$script:totalCount
$script:localCount

#selection
$script:selection = ""
#user input
$script:userInput = ""
#confirm
$script:confirm = ""

#date
$current_Date
#update Date
 $script:updateDate
 #today
 $todaysDate
#file
$script:file
#query
$script:query
#agent
$script:agentID = ""
#marker
$script:marker
#coment/description
$script:comment

#Hidden Mony Due Def variables
$deficienciesMenu =
"
1. Remove Hidden $ Due Deficiencies
2. Add HITS
3. Exit
"
$script:wait

#an Array List
$agentFiles = [System.Collections.Generic.List[string]]::new()
$script:fileNumbers = ""
$script:parentMenu

#setFiletoLA
$script:fileNumber = ""

#accounts
$script:actSeq = ""
$script:feeAmount
$script:feeType
$script:actCode

#Training course variables
$script:appTableMarker
$script:updateDate
$script:naicCourse
$script:stateName
$script:completionDate
$script:timeStamp
$script:both

#ownership
$script:step
$script:sellerAgentID
$script:sellerTempAgentID
$script:canadaOhCanada

#ssn correction variables
$script:correctSSN
$script:incorrectSSN
$script:correctClientID
$script:incorrectClientID
$script:correctAgentID
$script:incorrectAgentID
$script:oldFileNumber
$script:newFileNumber
$script:mtTimeStamp
$script:hasRecruits
$script:placeholder
$script:hireDate
$script:newSSN
$script:ssnCorrections
$script:prelicenseFlag
$script:initial
$script:bogusSSNFlag
$script:bogusSSN
$script:totalSteps
$script:table
$script:deleteRow
$script:target1
$script:target2
$script:oldestRow
$script:newestRow
$ssnInfo =  [System.Collections.Generic.List[string]]::new()

###############################################################################################
#		DEFINE FUNCTIONS HERE
###############################################################################################

#get current date
function getCurrentDate{

    Set-Variable -Name current_Date -Value (Get-Date -Format MMddyyyy) -Scope script
   

}#end function

#getUpdateDate
function getUpdateDate{

    Set-Variable -Name updateDate -Value (Get-Date -Format yyyy-MM-dd) -Scope script
    Set-Variable -Name todaysDate -Value $updateDate -Scope script

}#end function

#keep track of changes number'
function getChangeCounter{

    #keep record of changes per file
    #adds change staement to spufi object then saves file
    Set-Variable -Name spufi -Value $script:change -Scope script
    #save file
    saveToFile

    switch($script:counterIndicator) {
    
        1{increaseTotalCount}
        2{increaseLocalCount}

    }

}#end function

#get agent id
function getAgentID{

    Clear-Variable -Name agentID -Scope script

    Set-Variable -Name prompt -Value "Enter Agent ID " -Scope script

    confirmUserInput

    Set-Variable -Name agentID -Value $script:userInput -Scope script

}#end function

#get file number
function getFileNumber{

    Clear-Variable -Name fileNumber -Scope script

    Set-Variable -Name prompt -Value "Enter File Number " -Scope script

    confirmUserInput

    Set-Variable -Name fileNumber -Value $script:userInput -Scope script

}#end function

#activity sequence
function getActSeq{

    Clear-Variable -Name actSeq -Scope script

    Set-Variable -Name prompt -Value "Enter Activity Sequence " -Scope script

    confirmUserInput

    Set-Variable -Name actSeq -Value $script:userInput -Scope script

}#end function

#completion date
function getCompletionDate{

    #Get completion Date
    Set-Variable -Name prompt -Value "Completion Date (YYYY-MM-DD)" -Scope script
    getUserInput
    Set-Variable -Name completionDate -Value $script:userInput -Scope script

}#end function

#set counter to total
function setCounterToTotal{
    
    Set-Variable -Name change -Value ("--CHANGE " + $totalCount) -Scope script
    Set-Variable -Name counterIndicator -Value 1 -Scope script

}#end function

#set counter to local counter
function setCounterToLocal{

    Set-Variable -Name localCount -Value 1 -Scope script
    Set-Variable -Name counterIndicator -Value 2 -Scope script

}#end function

#increase total count
function increaseTotalCount{ 
    
        $script:totalCount++

        Set-Variable -Name change -Value ("--CHANGE " + $totalCount) -Scope script
        
        
}#end function

#increase local count
function increaseLocalCount{ 

        $script:localCount++

        Set-Variable -Name change -Value ("--CHANGE " + $localCount) -Scope script

}#end function

#reset local counter
function resetLocalCounter{

        #set counter
        Set-Variable -Name localCount -Value 1 -Scope script

        Set-Variable -Name counter -Value $localCount -Scope script

        Set-Variable -Name change -Value ("--CHANGE " + $counter) -Scope script

}#end function

#Add select statement
function addSelectStatement{

    #save the spufi to the file. Add lines to it here
    #adds select staement then saves file
    Set-Variable -Name spufi -Value ($script:selectStatement) -Scope script
    #save file
    saveToFile
   

}#end function

#Create insert statement
function addInsertStatement{

    #sample SPUFI
    Set-Variable -Name spufi -Value ($script:insertStatement) -Scope script

    saveToFile

}#end function

#Create update statement
function addUpdateStatement{

    #sample SPUFI
    Set-Variable -Name spufi -Value ($script:updateStatement) -Scope script

    saveToFile
}#end function

#Create Delete statement
Function addDeleteStatement{

    #step 3: add delete statement
    #Set-variable -name query -Value "spufi" -Scope script
    #sample SPUFI
    Set-Variable -Name spufi -Value ($deleteStatement) -Scope script

    saveToFile

}#end function

#Create App Table title 
function addChangeMarker{

    Set-Variable -Name changeMarker -Value ($script:marker) -Scope script

    Set-Variable -Name spufi -Value ($script:changeMarker ) -Scope script
    #save file
    saveToFile

}#end function

#change comment/description
function addChangeComment{

    Set-Variable -Name spufi -Value $script:comment -Scope script

    saveToFile

}#end function

#add space between spufis
function addSpace{

    Set-Variable -Name spufi -Value $script:spaceBanner -Scope script

    saveToFile

}#end function

#back to parent menu
function parentMenu{

    #chooses which parent menu to return to depending on value
    switch($script:parentMenu){
    
        #Hidden $ Due
        1 {deficienciesMenu}#end option 1
        #Remove Pay Meth Row
        2 {accountsMenu}#end option 2
        #ADD FILE
        3 {sendADDFile}#end option 3
        #fees
        4 {feeChanges}#end option 4
        #Srr
        5 {srrMenu}#end option 5
        #RegBICredits
        6 {RegBICredits}#end option 6
        #Main menu
        7 {menuOptions}

    }#end switch statement

}#end function

#banner
function showBanner{

    Write-Host $banner -ForegroundColor Green

}#end function



                    ###############################################
                    #                              MAIN MENU                                  #
                    ###############################################

#Menu. Gives user options and needs response to continue
function menuOptions{

    #banner
    Write-Host "`n
                            MAIN MENU" -ForegroundColor Cyan

    #menu options to come
    Write-Host $mainMenu

    #add number of possible menu answers
    Set-Variable -Name possibleValues -Value (@(1..8)) -Scope script

    userSelection

    switch ($script:selection) 

    {
        #MoneyDue Deficiency
        1 {deficienciesMenu}
        #Add Training Courses
        2 {credits}
        3 {accountsMenu}
        4 {setFileToLA}#end option 4
        5 {srrMenu}#end option 5
        6 {ssnCorrectionsMainMenu}#end option 10
        7 {ownership}#end option 7
        8 {Exit}
    
    
    } #end switch case

}#end function

                    ###############################################
                    #                               USER INPUT                                   #
                    ###############################################

#take user input and pass it back. No confirmation
function userSelection{

    #clear reusable variables
    Clear-Variable -Name selection -Scope script

   Do{
    
        #Get courseSelection
        $script:selection = Read-Host -Prompt "`nPlease make a selection"

    }until($script:selection -in $script:possibleValues) #end Do statement 


}#end function

#get user input but do not confirm it
function getUserInput{

    #clear reusable variables
    Clear-Variable -Name userInput -Scope script

    Set-Variable -Name userInput -Value (Read-Host -Prompt "`n$script:prompt") -Scope script

}#end function

#take user input and pass it back. Confirmation
function confirmUserInput{

    #clear reusable variables
    Clear-Variable -Name userInput -Scope script
    Clear-Variable -Name confirm -Scope script

    Do{
    
        #Get courseSelection
        Set-Variable -Name userInput -Value (Read-Host -Prompt "`n$script:prompt") -Scope script
        
        "`n$script:userInput"

        $script:confirm = Read-Host -Prompt "`nIs this correct? (y/n)"

            if($confirm -eq 'n'){
            
                Clear-Variable -Name userInput

            }#end if statement

    }until($script:confirm -eq 'y') #end Do statement 


}#end function

#give user y or n options
function yesNoQuestion{

    #clear reusable variables
    Clear-Variable -Name selection -Scope script
    Clear-Variable -Name confirm -Scope script

    Do{
    
        #Get courseSelection
        $script:selection = Read-Host -Prompt "`n$script:prompt (y/n)"

    }until($script:selection -eq 'y' -or $script:selection -eq 'n' ) #end Do statement 


}#end function


                    ###############################################
                    #                         HIDDEN MONY DUE DEF                            #
                    ###############################################

#Deficiencies menu
function deficienciesMenu{

     #banner
    Write-Host "`nDeficinecies Menu" -ForegroundColor Cyan
    Write-Host $deficienciesMenu

    Set-Variable -Name possibleValues -Value (@(1..3)) -Scope script
    #setParentMenu
    Set-Variable -Name parentMenu -Value 1 -Scope script
    
    userSelection

    switch ($script:selection) 

    {
        #Add credits
        1 {hiddenMonyDueDef}
        #Remove credits 
        2 {addHITS}
        #Main Menu
        3 {menuOptions | addSpace }#end option 4
  
    } #end switch case

}#end function

#function
function hiddenMonyDueDef{

    #banner
    Write-Host "`nHidden Mony Due Deficinecies Menu" -ForegroundColor Cyan

    Write-Host "`nCurrent File List ($script:fileNumbers)" -ForegroundColor Magenta

    #step 1. Show menu
    Write-Host $simpleFilesMenu

    #add number of possible menu answers
    Set-Variable -Name possibleValues -Value (@(1..5)) -Scope script

    #Set-Variable -Name tableName -Value $lic_Agent_Training -Scope script
    Set-Variable -Name tableName -Value $state_Lic_Def_Resp -Scope script
    Set-Variable -Name column1 -Value "FILE_NUM" -Scope script
    Set-Variable -Name column2 -Value "REQUIRED_FORM" -Scope script
    Set-Variable -Name column3 -Value "STATUS" -Scope script

    Set-Variable -Name action -Value 1 -Scope script


    #Step 2: User adds value(s) to the list

    #Step 3: List gets added to the SPUFI
    #Step 4: List gets updated and rewritten whenever this fucntion runs, to account for new items in list

    #step 2
    userSelection

    switch ($script:selection) 

    {
        #Add File 
        1 {
                Set-Variable -Name prompt -Value "`nFile number" -Scope script
                getUserInput
                $agentFiles.Add($userInput)
                Write-Host "`nDone" -ForegroundColor Green
                hiddenMonyDueDef
           }#end option 1
        #Stop Adding
        2 { createSpufi | parentMenu}#end option 2
        #show items in list
        3 {showItemsInList | parentMenu}#end option 3
        #Clear list and start a new list
        4 {clearList | parentMenu}#end option 3
        #Exit
        5 {clearList | parentMenu}#end option 4
    
    } #end switch case

}#end function

#create string from list
function getFileNumbers {

    for($i=0;$i -lt $agentFiles.Count;$i++){

	    if ($i -eq $agentFiles.Count-1){
		
		    $string = $agentFiles[$i]

            $agentFiles[$i]
		
		    $str3 = "'$string'"

            $str3
		
	    }else{
		
		    $string = $agentFiles[$i]
		
		    $string
		
		    $str2 += "'$string',"

            $str2
	
	    }
    }

$fileNumbers = $str2+$str3
 Set-Variable -Name fileNumbers -Value $fileNumbers -Scope script
$script:fileNumbers

}#end function

#create spufi
function createSpufi{

                getChangeCounter
                getFileNumbers

                switch($script:parentMenu){
                    
                    #Hidden $ due def
                    1 {
                            Set-Variable -Name comment -Value "--REMOVE HIDDEN MONEY DUE DEFS" -Scope script
                            Set-Variable -Name selectStatement -Value (
                            "SELECT *`nFROM $script:tableName`nWHERE $script:column1 IN ($script:fileNumbers)`nAND $script:column2 = 'MONEYDUE';`n"
                            ) -Scope script
                            Set-Variable -Name deleteStatement -Value (
                            "DELETE FROM $script:tableName`nWHERE $script:column1 IN ($script:fileNumbers)`nAND $script:column2 = 'MONEYDUE';`n"
                            ) -Scope script
                      }#end option 1

                    #Rejected Pay Meth
                    2 {
                            Set-Variable -Name comment -Value "--REMOVE REJECTED PAYMENT METHOD ROWS" -Scope script
                            Set-Variable -Name selectStatement -Value (
                            "SELECT *`nFROM $script:tableName`nWHERE $script:column1 IN ($script:fileNumbers)`nAND $script:column2 = 'R';`n"
                             ) -Scope script
                             Set-Variable -Name deleteStatement -Value (
                            "DELETE FROM $script:tableName`nWHERE $script:column1 IN ($script:fileNumbers)`nAND $script:column2 = 'R';`n"
                            ) -Scope script
                        }#end option 2

                     #Send Add File
                     3 {
                            Set-Variable -Name comment -Value "--SEND ADD FILE TO COREBRIDGE" -Scope script
                            Set-Variable -Name selectStatement -Value ("SELECT *`nFROM $script:tableName`nWHERE $script:column1 IN ($script:fileNumbers);`n") -Scope script
                            Set-Variable -Name updateStatement -Value ("UPDATE $script:tableName`nSET $script:column2 = 'Y'`nWHERE $script:column1 IN ($script:fileNumbers);`n") -Scope script
                         }#end option 3
                }#end inner switch statement

                addChangeComment
                addSelectStatement

                switch($script:action)
                 {
                    1 {addDeleteStatement}
                    2 {addUpdateStatement}
                 }

                addSelectStatement
                parentMenu

}#end function

#show current items in list
function showItemsInList{

    getFileNumbers
    $script:fileNumbers
    parentMenu

}#end function

#clear list
function clearList{

    $agentFiles.Clear()
    Clear-Variable -Name fileNumbers -Scope script

}#end function

#HITS
function addHITS{

     Set-Variable -Name tableName -Value $state_Lic_Def_Resp -Scope script
     Set-Variable -Name column1 -Value "FILE_NUM" -Scope script
     Set-Variable -Name column2 -Value "REQUIRED_FORM" -Scope script

     Set-Variable -Name comment -Value "--ADD HITS" -Scope script
     getUpdateDate
     getFileNumber

                #get SSN value
                Set-Variable -Name prompt -Value "Enter client ID value" -Scope script
                confirmUserInput
                $clientID = $script:userInput

                #get form
                Set-Variable -Name prompt -Value "Enter required form name" -Scope script
                confirmUserInput
                $form = $script:userInput

    
    $stateAbb = $script:fileNumber.Substring(0,2)
    $updDate = ($updateDate+'-01.01.01.000001')
     Set-Variable -Name action -Value 3 -Scope script
     Set-Variable -Name selectStatement -Value (
            "SELECT *`nFROM $script:tableName`nWHERE $script:column1 IN ('$script:fileNumber')`nAND $script:column2 = '$form';`n"
     ) -Scope script
     Set-Variable -Name insertStatement -Value (
"INSERT INTO $script:tableName
VALUES ('USA','04','$script:fileNumber',$clientID,'$stateAbb','$updateDate'
,'','$form','Z9','9999-12-31','$updDate'
,'LB5','','O','','','','');`n "
     ) -Scope script
     Set-Variable -Name wait -Value 'y' -Scope script
     fileStatusFiller 
     

     #part 2
     Set-Variable -Name tableName -Value $state_Lic_Proc_Doc -Scope script
     Set-Variable -Name selectStatement -Value (
            "SELECT *`nFROM $script:tableName`nWHERE $script:column1 IN ('$script:fileNumber')`nAND $script:column2 = '$form';`n"
     ) -Scope script
     Set-Variable -Name insertStatement -Value (
"INSERT INTO $script:tableName
VALUES ('USA','04','$stateAbb','$script:fileNumber','$form'
,'$updateDate','200','$updDate','LB5');`n "
     ) -Scope script
     Clear-Variable -Name wait -Scope script
     fileStatusFiller 

}#end function





                    ###############################################
                    #                          TRAINING CREDITS                                   #
                    ###############################################

#Add Reg BI Credits
function RegBICredits{

    Set-Variable -Name marker -Value "--ADD TRAINING CREDITS "

    #banner
    Write-Host "`nREG BI Credits Menu" -ForegroundColor Cyan

    #step 1. Show menu
    Write-Host $RegBICreditsMenu

    #add number of possible menu answers
    Set-Variable -Name possibleValues -Value (@(1..4)) -Scope script

    #Set-Variable -Name tableName -Value $lic_Agent_Training -Scope script
    Set-Variable -Name column1 -Value "AGENT_ID" -Scope script

    #step 2
    userSelection

    switch ($script:selection) 

    {
        #Add State credits
        1 {addStateCredit}#end option 1
        #Add Home State credit 
        2 {addHomeStateCredit}#end option 2
        #both
        3 {
                Set-Variable -Name both -Value 'y' -Scope script
                Set-Variable -Name wait -Value 'y' -Scope script
                addStateCredit
                addHomeStateCredit
                Clear-Variable -Name wait -Scope script
           }#end option 3
        #Main Menu
        4 {menuOptions}#end option 4
    
    } #end switch case

}#end function

#Add REG BI credits
function addStateCredit{

    #step 1: Set table
    #step 2: get Agent ID
    getAgentID
    #step 3: Select Statment
    Set-Variable -Name tableName -Value $state_Naic_Training -Scope script
    Set-Variable -Name parentMenu -Value 6 -Scope script
    Set-Variable -Name comment -Value "--ADD REG BI STATE CREDIT" -Scope script
    #trainingCreditsFiller
    Set-Variable -Name selectStatement -Value ("SELECT *`nFROM $script:tableName`nWHERE $script:column1 IN ('$script:agentID');`n") -Scope script
    #addSelectStatement

    #banner
    Write-Host "`nNAIC COURSE Completed?" -ForegroundColor Cyan
    #Show menu
    Write-Host $naicCourse_Menu
    Set-Variable -Name possibleValues -Value (@(1..3)) -Scope script
    userSelection
    Switch($script:selection)
    {
        1{Set-Variable -Name naicCourse -Value "L" -Scope script}
        2{Set-Variable -Name naicCourse -Value "R" -Scope script}
        3{Set-Variable -Name naicCourse -Value "M" -Scope script}
    }

    #step 4: get course type
    #step 5: get State
    #step 6: get completion date
    #step 7: get current date
    #step 8: create insert statement
    #step 9: select statement

    #Get State where course was taken
    Set-Variable -Name prompt -Value "State where course was completed (AA)?" -Scope script
    getUserInput
    Set-Variable -Name stateName -Value $script:userInput -Scope script

    #Get completion Date
    getCompletionDate

    #Format current Date to include time 
    Set-Variable -Name timeStamp -Value ("$todaysDate-01.01.01.000001") -Scope script

    #Create insert statement
    Set-Variable -Name insertStatement -Value (
    "INSERT INTO $script:tableName`nVALUES ('$script:AgentID','$script:naicCourse','$script:stateName','$script:completionDate',`n'$script:timeStamp','$script:timeStamp');`n"
    ) -Scope script
    Set-Variable -Name action -Value 3 -Scope script

    #addInsertStatement
    #addSelectStatement

    #go back to parent menu
     #if($script:wait -ne 'y'){parentMenu}#end if statement
    #RegBICredits
    fileStatusFiller

}#end function

#Add Home State Credit
function AddHomeStateCredit{

    #step 1: Set table
    #step 2: get Agent ID
    if($script:both -ne 'y'){getAgentID}#end if statement
    #step 3: Select Statment
    Set-Variable -Name tableName -Value $state_Lic_Annuities -Scope script
    Set-Variable -Name column2 -Value "NAIC_TRAINING_COMPLETE" -Scope script
    Set-Variable -Name column3 -Value "NAIC_COMPLETION_DATE" -Scope script
    Set-Variable -Name comment -Value "--ADD REG BI HOME STATE CREDIT" -Scope script
    Set-Variable -Name parentMenu -Value 6 -Scope script
    #trainingCreditsFiller 
    Set-Variable -Name selectStatement -Value ("SELECT *`nFROM $script:tableName`nWHERE $script:column1 IN ('$script:agentID');`n") -Scope script
    #addSelectStatement
    
    #Get completion Date
    if($script:both -ne 'y'){getCompletionDate}#end if statement
    
    #Create insert statement
    Set-Variable -Name updateStatement -Value (
    "UPDATE $script:tableName`nSET $script:column2 = 'R',`n$script:column3 = '$script:completionDate'`nWHERE $script:column1 IN ('$script:agentID');`n"
    ) -Scope script
    Set-Variable -Name action -Value 2 -Scope script

    if($wait -eq 'y'){Clear-Variable -Name wait -Scope script}#end if statement

    #addupdateStatement
    #addSelectStatement

    #go back to parent menu
    #parentMenu
    fileStatusFiller

}#end function

#main function flow chart
function credits{

    #banner
    Write-Host "`nCREDITS MENU" -ForegroundColor Cyan

    #step 1. Show menu
    Write-Host $creditsMenu

    #add number of possible menu answers
    Set-Variable -Name possibleValues -Value (@(1..5)) -Scope script

    Set-Variable -Name tableName -Value $lic_Agent_Training -Scope script
    Set-Variable -Name column1 -Value "AGENT_ID" -Scope script
    Set-Variable -Name column2 -Value "SUITABILITY" -Scope script

    #step 2
    userSelection

    switch ($script:selection) 

    {
        #Add credits
        1 { 
            #Set-Variable -Name marker -Value "--ADD COURSE CREDITS" -Scope script
            Set-Variable -Name comment -Value "--ADD CREDIT COURSES" -Scope script
            trainingCreditsFiller
            Set-Variable -Name selectStatement -Value (
"SELECT COUNT(*)
FROM $script:tableName
WHERE $script:column1 IN ('$script:agentID');`n") -Scope script
            addSelectStatement
            addTrainingCredits 
        }
        #Remove credits 
        2 { 
            #Set-Variable -Name marker -Value "--REMOVE COURSE CREDITS" -Scope script
            Set-Variable -Name comment -Value "--REMOVE CREDIT COURSES" -Scope script
            trainingCreditsFiller
            Set-Variable -Name selectStatement -Value ("SELECT COUNT(*)`nFROM $script:tableName`nWHERE $script:column1 IN ('$script:agentID');`n") -Scope script
            addSelectStatement
            removeTrainingCredits 
           }
        #send ADD File
        3{sendADDFile}#end option 3
        #Reg BI
        4 {RegBICredits}#end option 4
        #Main Menu
        5 { menuOptions | addSpace }#end option 4
    
    } #end switch case

}#end function

#Step 2. Make sure user wants to add credits
function addTrainingCredits{

    #Show menu to user
    Write-Host "$trainingCreditsMenu"

    #add number of possible menu answers
    Set-Variable -Name possibleValues -Value (@(1..39)) -Scope script

    #get selection
    userSelection

    #step 2: provide options to add to agent
    Switch ($script:selection)
    {
        #AGP I2 IA2
        1 { Write-Host "`nAGP I2 IA2" -ForegroundColor YELLOW 
            Set-Variable -Name courseOptions -Value ("'AGP','I2','IA2'")
            }#end option
        2 {Write-Host "`nAGP VA1" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'AGP','V1','VA1'")
            }#end option
        3 {Write-Host "`nAIG FA1" -ForegroundColor YELLOW
              Set-Variable -Name courseOptions -Value ("'AIG','F1','FA1'") 
            }#end option
        # AIG FA2 Assured Edge
        4 {Write-Host "`nAIG FA2" -ForegroundColor YELLOW
              Set-Variable -Name courseOptions -Value ("'AIG','F2','FA2'") 
            }#end option
        # AIG VARIABLE ANNUITIY TRAINING
        5 {Write-Host "`nAIG FA3" -ForegroundColor YELLOW
              Set-Variable -Name courseOptions -Value ("'AIG','F3','FA3'") 
             }#end option 
        # 'AIG','IA','IA1'
        6 {Write-Host "`nAIG IA1" -ForegroundColor YELLOW
              Set-Variable -Name courseOptions -Value ("'AIG','IA','IA1'") }#end option
        # AIG Indexed Training
        7 {Write-Host "`nAIG IA2" -ForegroundColor YELLOW
              Set-Variable -Name courseOptions -Value ("'AIG','IA','IA2'") 
             }#end option
        # AIG IA 1A1
        8 {Write-Host "`nAIG IA 1A1" -ForegroundColor YELLOW
              Set-Variable -Name courseOptions -Value ("'AIG','IA','1A1'")
            }#end option 
        #AIG IA 1A2
        9 {Write-Host "`nAIG IA 1A2" -ForegroundColor YELLOW
              Set-Variable -Name courseOptions -Value ("'AIG','IA','1A2'")
            }#end option
        #AIG I2 IA2
        10 {Write-Host "`nAIG I2 1A2" -ForegroundColor YELLOW
              Set-Variable -Name courseOptions -Value ("'AIG','I2','IA2'")
            }#end option
        # AIG I3 IA3
        11 {Write-Host "`nAIG I3 IA3" -ForegroundColor YELLOW
              Set-Variable -Name courseOptions -Value ("'AIG','I3','IA3'")
             }#end option 
        #AXA VA VA1
        12 {Write-Host "`nAXA VA VA1" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'AXA','VA','VA1'") 
            }#end option
        # AXA VA1 NY187
        13 {Write-Host "`nAXA VA1 NY187" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'AXA','VA1','NY187'") 
            }#end option
        # AXA VI VA1
        14 {Write-Host "`nAXA VI VA1" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'AXA','VI','VA1'") 
            }#end option
        # EQUITABLE EQUIVEST
        15 {Write-Host "`nAXA V1 VA1" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'AXA','V1','VA1'") 
            }#end option
        # AXA V1 VA2
        16 {Write-Host "`nAXA V1 VA2" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'AXA','V1','VA2'") 
            }#end option
        # Equitable Cornerstone
        17 {Write-Host "`nAXA V1 VA3" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'AXA','V1','VA3'") 
            }#end option
         # AXA 403(B) Variable Annuity Course V2
        18 {Write-Host "`nAXA 403B" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'AXA','V2','403B'") 
            }#end option
        # AXA/Equitable Dual Direction
        19 {Write-Host "`nAXA DUAL DIRECTION" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'AXA','V3','EQDD'")
            }#end option
        # Equitable Structured Capital Strategies 
        20 {Write-Host "`nStructured Capital" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'AXA','V3','SCS'") 
            }#end option
        # AXA V3 VA3
        21 {Write-Host "`nAXA V3 VA3" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'AXA','V3','VA3'") 
            }#end option
        # AXA V5 E1DD
        22 {Write-Host "`nAXA V5 E1DD" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'AXA','V5','E1DD'") 
            }#end option
        # PRIMERICA BROKER DEALER INDEXED LINKED VARIABLE ANNUITIES:
        23 { Write-Host "`nILV ILVA" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'ILV','VA','ILVA'") 
            }#end option
        # LINCOLN INDEXED ANNUITY TRAINING:
        24 { Write-Host "`nLIN IA IA1" -ForegroundColor YELLOW 
            Set-Variable -Name courseOptions -Value ("'LIN','IA','IA1'") 
            }#end option
        #LIN I2 IA1
        25 {Write-Host "`nLIN I2 IA2" -ForegroundColor YELLOW 
            Set-Variable -Name courseOptions -Value ("'LIN','I2','IA1'") 
            }#end option 3
        #LIN I2 IA2
        26 {Write-Host "`nLIN I2 IA2" -ForegroundColor YELLOW 
            Set-Variable -Name courseOptions -Value ("'LIN','I2','IA2'") }#end option 3
        # LIN VA VA1
        27 { Write-Host "`nLIN VA VA1" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'LIN','VA','VA1'") 
            }#end option
        # Lincoln Level Advantage
        28 { Write-Host "`nLIN VA V3" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'LIN','VA','VA3'") 
            }#end option
        # LIN V1 VA1
        29 { Write-Host "`nLIN V1 VA1" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'LIN','V1','VA1'") 
            }#end option
        # LIN V2 VA2
        30 { Write-Host "`nLIN V2" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'LIN','V2','VA2'") 
            }#end option
        # LIN V4 VA1
        31 { Write-Host "`nLIN V4 VA1" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'LIN','V4','VA1'") 
            }#end option
        # MET FA FA1
         32 { Write-Host "`nMET FA FA1" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'MET','FA','FA1'")
            }#end option
        # Brighthouse Prime Options/Brighthouse Variable
        33 { Write-Host "`nMET VA VA1" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'MET','VA','VA1'") 
            }#end option
         # Brighthouse Shield training
        34 { Write-Host "`nMET VA VA2" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'MET','V2','VA2'") 
            }#end option
         # MET V1 VA1
        35 { Write-Host "`nMET V1 VA1" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'MET','V1','VA1'") 
            }#end option
         # MET V2 VA2
        36 { Write-Host "`nMET V2 VA2" -ForegroundColor YELLOW
            Set-Variable -Name courseOptions -Value ("'MET','V2','VA2'") 
            }#end option
        # NY187
        37 { Write-Host "`nNY187" -ForegroundColor YELLOW 
            Set-Variable -Name courseOptions -Value ("'PRI','NY','NY187'")
            }#end option
          # Broker Dealer Suitability Training:
        38 {
            Set-Variable -Name tableName -Value $state_Lic_Annuities -Scope script
            Set-Variable -Name comment -Value "--STATE LIC ANNUITIES" -Scope script
            Set-Variable -Name selectStatement -Value (
"SELECT $script:column2
FROM $script:tableName
WHERE $script:column1 = '$script:agentID';`n") -Scope script
            Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column2 = 'Y'
WHERE $script:column1 = '$script:agentID';`n") -Scope script
            Set-Variable -Name action -Value 2 -Scope script
            filler
            }#end option
        #exit
        39 {}#end option
    
    
    }#end switch statement

    if($script:selection -ne 38){

        Set-Variable -Name insertStatement -Value (
"INSERT INTO $script:tableName
VALUES ('$script:agentID',$courseOptions,'$updateDate','$script:updateDate');`n") -Scope script

    #add insert statement
    addInsertStatement
    }
    else{
    Set-Variable -Name tableName -Value $lic_Agent_Training -Scope script}#end if/else statement
    
    #request another entry or get out
    #Set-Variable -Name prompt -Value "Do you want to add another credit?" -Scope script

    #yesNoQuestion

    if($script:selection -ne 39){
    
        #Y repeat step 3
        addTrainingCredits
    
    }elseif($script:selection -eq 39){

         #No. Add select statement, and exit to main menu
         addSelectStatement
         credits
 
    }#end if/elseif statement

}#end function

#create delete statement
function removeTrainingCredits{

    #Show menu to user
    Write-Host "$trainingCreditsMenu"

    #add number of possible menu answers
    Set-Variable -Name possibleValues -Value (@(1..39)) -Scope script
    Set-Variable -Name column2 -Value "CARRIER" -Scope script
    Set-Variable -Name column3 -Value "TRAINING_COURSE" -Scope script
    Set-Variable -Name column4 -Value "PRODUCT_LINE" -Scope script

    #get selection
    userSelection

    #step 2: provide options to add to agent
    Switch ($script:selection)
    {
        1 { Write-Host "`nAGP I2 IA2" -ForegroundColor YELLOW 
            Set-Variable -Name carrier -Value "'AGP'"
            Set-Variable -Name productLine -Value "'I2'"
            Set-Variable -Name trainingCourse -Value "'IA2'"
            }#end option
        # AIG VARIABLE ANNUITIY TRAINING
        2 { Write-Host "`nAGP V1 VA1" -ForegroundColor YELLOW 
            Set-Variable -Name carrier -Value "'AGP'"
            Set-Variable -Name productLine -Value "'V1'"
            Set-Variable -Name trainingCourse -Value "'VA1'"
            }#end option
        3 { Write-Host "`nAIG F1 FA1" -ForegroundColor YELLOW 
            Set-Variable -Name carrier -Value "'AIG'"
            Set-Variable -Name productLine -Value "'F1'"
            Set-Variable -Name trainingCourse -Value "'FA1'"
            }#end option
        4 { Write-Host "`nAIG F2 FA2" -ForegroundColor YELLOW 
            Set-Variable -Name carrier -Value "'AIG'"
            Set-Variable -Name productLine -Value "'F2'"
            Set-Variable -Name trainingCourse -Value "'FA2'"
            }#end option
        5 { Write-Host "`nAIG F3 FA3" -ForegroundColor YELLOW 
            Set-Variable -Name carrier -Value "'AIG'"
            Set-Variable -Name productLine -Value "'F3'"
            Set-Variable -Name trainingCourse -Value "'FA3'"
            }#end option
        6 { Write-Host "`nAIG IA IA1" -ForegroundColor YELLOW 
            Set-Variable -Name carrier -Value "'AIG'"
            Set-Variable -Name productLine -Value "'IA'"
            Set-Variable -Name trainingCourse -Value "'IA1'"
            }#end option
        7 { Write-Host "`nAIG IA IA2" -ForegroundColor YELLOW 
            Set-Variable -Name carrier -Value "'AIG'"
            Set-Variable -Name productLine -Value "'IA'"
            Set-Variable -Name trainingCourse -Value "'IA2'"
            }#end option
        8 { Write-Host "`nAIG IA 1A1" -ForegroundColor YELLOW 
            Set-Variable -Name carrier -Value "'AIG'"
            Set-Variable -Name productLine -Value "'IA'"
            Set-Variable -Name trainingCourse -Value "'1A1'"
            }#end option
        9 { Write-Host "`nAIG IA 1A2" -ForegroundColor YELLOW 
            Set-Variable -Name carrier -Value "'AIG'"
            Set-Variable -Name productLine -Value "'IA'"
            Set-Variable -Name trainingCourse -Value "'1A2'"
            }#end option
        10 { Write-Host "`nAIG I2 IA2" -ForegroundColor YELLOW 
            Set-Variable -Name carrier -Value "'AIG'"
            Set-Variable -Name productLine -Value "'I2'"
            Set-Variable -Name trainingCourse -Value "'IA2'"
            }#end option
        11 { Write-Host "`nAIG I3 IA3" -ForegroundColor YELLOW 
            Set-Variable -Name carrier -Value "'AIG'"
            Set-Variable -Name productLine -Value "'I3'"
            Set-Variable -Name trainingCourse -Value "'IA3'"
            }#end option
        12 { Write-Host "`nAXA VA VA1" -ForegroundColor YELLOW 
            Set-Variable -Name carrier -Value "'AXA'"
            Set-Variable -Name productLine -Value "'VA'"
            Set-Variable -Name trainingCourse -Value "'VA1'"
            }#end option
        13 { Write-Host "`nAXA VA1 NY187" -ForegroundColor YELLOW 
            Set-Variable -Name carrier -Value "'AXA'"
            Set-Variable -Name productLine -Value "'VA1'"
            Set-Variable -Name trainingCourse -Value "'NY187'"
            }#end option
        14 { Write-Host "`nAXA VI VA1" -ForegroundColor YELLOW 
            Set-Variable -Name carrier -Value "'AXA'"
            Set-Variable -Name productLine -Value "'VI'"
            Set-Variable -Name trainingCourse -Value "'VA1'"
            }#end option
             # EQUITABLE EQUIVEST
        15 { Write-Host "`nAXA V1 VA1" -ForegroundColor YELLOW 
            Set-Variable -Name carrier -Value "'AXA'"
            Set-Variable -Name productLine -Value "'V1'"
            Set-Variable -Name trainingCourse -Value "'VA1'"
            }#end option
        16 { Write-Host "`nAXA V1 VA2" -ForegroundColor YELLOW 
            Set-Variable -Name carrier -Value "'AXA'"
            Set-Variable -Name productLine -Value "'V1'"
            Set-Variable -Name trainingCourse -Value "'VA2'"
            }#end option
            # Equitable Cornerstone
        17 { Write-Host "`nAXA V1 VA3" -ForegroundColor YELLOW 
            Set-Variable -Name carrier -Value "'AXA'"
            Set-Variable -Name productLine -Value "'V1'"
            Set-Variable -Name trainingCourse -Value "'VA3'"
            }#end option
        # AXA 403(B) Variable Annuity Course V2
        18 {Write-Host "`nAXA V2 403B" -ForegroundColor YELLOW
            Set-Variable -Name carrier -Value "'AXA'"
            Set-Variable -Name productLine -Value "'V2'"
            Set-Variable -Name trainingCourse -Value "'403B'"
            }#end option
        19 {Write-Host "`nAXA V3 EQDD" -ForegroundColor YELLOW
            Set-Variable -Name carrier -Value "'AXA'"
            Set-Variable -Name productLine -Value "'V3'"
            Set-Variable -Name trainingCourse -Value "'EQDD'"
            }#end option
             # Equitable Structured Capital Strategies
        20 {Write-Host "`nAXA V3 SCS" -ForegroundColor YELLOW
            Set-Variable -Name carrier -Value "'AXA'"
            Set-Variable -Name productLine -Value "'V3'"
            Set-Variable -Name trainingCourse -Value "'SCS'"
            }#end option
        21 {Write-Host "`nAXA V3 VA3" -ForegroundColor YELLOW
            Set-Variable -Name carrier -Value "'AXA'"
            Set-Variable -Name productLine -Value "'V3'"
            Set-Variable -Name trainingCourse -Value "'VA3'"
            }#end option
            # AXA/Equitable Dual Direction
        22 {Write-Host "`nAXA V5 E1DD" -ForegroundColor YELLOW
            Set-Variable -Name carrier -Value "'AXA'"
            Set-Variable -Name productLine -Value "'V5'"
            Set-Variable -Name trainingCourse -Value "'E1DD'"
            }#end option
        # PRIMERICA BROKER DEALER INDEXED LINKED VARIABLE ANNUITIES:
        23 { Write-Host "`nILV VA ILVA" -ForegroundColor YELLOW
            Set-Variable -Name carrier -Value "'ILV'"
            Set-Variable -Name productLine -Value "'VA'"
            Set-Variable -Name trainingCourse -Value "'ILVA'" 
            }#end option
        # LINCOLN INDEXED ANNUITY TRAINING:
        24 { Write-Host "`nLIN IA IA1" -ForegroundColor YELLOW 
            Set-Variable -Name carrier -Value "'LIN'"
            Set-Variable -Name productLine -Value "'IA'"
            Set-Variable -Name trainingCourse -Value "'IA1'" 
            }#end option
        25 { Write-Host "`nLIN I2 IA1" -ForegroundColor YELLOW 
            Set-Variable -Name carrier -Value "'LIN'"
            Set-Variable -Name productLine -Value "'I2'"
            Set-Variable -Name trainingCourse -Value "'IA1'" 
            }#end option
        26 { Write-Host "`nLIN I2 IA2" -ForegroundColor YELLOW 
            Set-Variable -Name carrier -Value "'LIN'"
            Set-Variable -Name productLine -Value "'I2'"
            Set-Variable -Name trainingCourse -Value "'IA2'" 
            }#end option
            # Lincoln Variable Training
        27 { Write-Host "`nLIN VA VA1" -ForegroundColor YELLOW
            Set-Variable -Name carrier -Value "'LIN'"
            Set-Variable -Name productLine -Value "'VA'"
            Set-Variable -Name trainingCourse -Value "'VA1'"
            }#end option
        # LIN VA VA3
        28 { Write-Host "`nLIN VA VA3" -ForegroundColor YELLOW
            Set-Variable -Name carrier -Value "'LIN'"
            Set-Variable -Name productLine -Value "'VA'"
            Set-Variable -Name trainingCourse -Value "'VA3'"
            }#end option
        29 { Write-Host "`nLIN V1 VA1" -ForegroundColor YELLOW
            Set-Variable -Name carrier -Value "'LIN'"
            Set-Variable -Name productLine -Value "'V1'"
            Set-Variable -Name trainingCourse -Value "'VA1'"
            }#end option
        30 { Write-Host "`nLIN V2 VA2" -ForegroundColor YELLOW
            Set-Variable -Name carrier -Value "'LIN'"
            Set-Variable -Name productLine -Value "'V2'"
            Set-Variable -Name trainingCourse -Value "'VA2'"
            }#end option
            # Lincoln Level Advantage
        31 { Write-Host "`nLIN V4 VA1" -ForegroundColor YELLOW
            Set-Variable -Name carrier -Value "'LIN'"
            Set-Variable -Name productLine -Value "'V4'"
            Set-Variable -Name trainingCourse -Value "'VA1'"
            }#end option
            # Brighthouse Fixed Annuity
        32 { Write-Host "`nMET FA FA1" -ForegroundColor YELLOW
            Set-Variable -Name carrier -Value "'MET'"
            Set-Variable -Name productLine -Value "'FA'"
            Set-Variable -Name trainingCourse -Value "'FA1'"
            }#end option
            # Brighthouse Prime Options/Brighthouse Variable
        33 { Write-Host "`nMET VA VA1" -ForegroundColor YELLOW
            Set-Variable -Name carrier -Value "'MET'"
            Set-Variable -Name productLine -Value "'VA'"
            Set-Variable -Name trainingCourse -Value "'VA1'"
            }#end option
            # Brighthouse Shield training
        34 { Write-Host "`nMET VA VA2" -ForegroundColor YELLOW
            Set-Variable -Name carrier -Value "'MET'"
            Set-Variable -Name productLine -Value "'VA'"
            Set-Variable -Name trainingCourse -Value "'VA2'"
            }#end option
        35 { Write-Host "`nMET V1 VA1" -ForegroundColor YELLOW
            Set-Variable -Name carrier -Value "'MET'"
            Set-Variable -Name productLine -Value "'V1'"
            Set-Variable -Name trainingCourse -Value "'VA1'"
            }#end option
        36 { Write-Host "`nMET V2 VA2" -ForegroundColor YELLOW
            Set-Variable -Name carrier -Value "'MET'"
            Set-Variable -Name productLine -Value "'V2'"
            Set-Variable -Name trainingCourse -Value "'VA2'"
            }#end option
        # NY187
        37 { Write-Host "`nPRI NY187" -ForegroundColor YELLOW 
            Set-Variable -Name carrier -Value "'PRI'"
            Set-Variable -Name productLine -Value "'NY'"
            Set-Variable -Name trainingCourse -Value "'NY187'"
            }#end option
        38 {}
        #exit
        39 {}#end option 
        
    }#end switch statement
    
    Set-Variable deleteStatement -Value (
"DELETE FROM $script:tableName
WHERE $script:column1 ='$script:agentID'
AND $script:column2 = $carrier 
AND $script:column4 =$productLine
AND $script:column3 = $trainingCourse;`n"
    ) -Scope script

    addDeleteStatement

    #step 4. Add more or head out
    Set-Variable -Name prompt -Value "Do you want to delete another course?" -Scope script
    #request another entry or get out
    yesNoQuestion

    if($script:selection -eq 'y'){
    
        #Y repeat step 3
        removeTrainingCredits
    
    }elseif($script:selection -eq 'n')
    {
         #No. Add select statement, and exit to main menu
         addSelectStatement
         credits
    
    }#end if/elseif statement


}#end function

#send ADD file
function sendADDFile{

    #banner
    Write-Host "`nSend ADD File Menu" -ForegroundColor Cyan

    Write-Host "`nCurrent File List ($script:fileNumbers)" -ForegroundColor Magenta

    #step 1. Show menu
    Write-Host $simpleFilesMenu

    #setParentMenu
    Set-Variable -Name parentMenu -Value 3 -Scope script

    #add number of possible menu answers
    Set-Variable -Name possibleValues -Value (@(1..5)) -Scope script

    #Set-Variable -Name tableName -Value $lic_Agent_Training -Scope script
    Set-Variable -Name tableName -Value $state_Lic_Annuities -Scope script
    Set-Variable -Name column1 -Value "AGENT_ID" -Scope script
    Set-Variable -Name column2 -Value "PII_ATTEST" -Scope script
    Set-Variable -Name action -Value 2 -Scope script

    #step 2
    userSelection

    switch ($script:selection) 

    {
        #Add File 
        1 {
                Set-Variable -Name prompt -Value "`nAgent ID" -Scope script
                getUserInput
                $agentFiles.Add($userInput)
                Write-Host "`nDone" -ForegroundColor Green
                parentMenu
           }#end option 1
        #Stop Adding
        2 { createSpufi}#end option 2
        #show items in list
        3 {showItemsInList | parentMenu}#end option 3
        #Clear list and start a new list
        4 {clearList |parentMenu}#end option 3
        #Exit
        5 {clearList | menuOptions}#end option 4
    
    } #end switch case

}#end function

function trainingCreditsFiller{

            getAgentID 
            getChangeCounter 
            addChangeComment 
            Write-Host "Done" -ForegroundColor green

}#end function



                    ###############################################
                    #                           CHANGE FILE STATUS                              #
                    ###############################################
#set file to LA
function setFileToLA{

    getUpdateDate
    Set-Variable -Name column1 -Value "FILE_NUM" -Scope script
    Set-Variable -Name column2 -Value "REASON_CODE" -Scope script
    Set-Variable -Name column3 -Value "APP_STATUS" -Scope script
    Set-Variable -Name column4 -Value "CLIENT_ID" -Scope script
    Set-Variable -Name column5 -Value "MF_RETURN_CODE" -Scope script
    getFileNumber
    Set-Variable -Name prompt -Value "Reject History?" -Scope script
    yesNoQuestion
    
    #History
    Set-Variable -Name tableName -Value $acf_Flo_History -Scope script
    Set-Variable -Name comment -Value "--CHANGE 1 HISTORY" -Scope script
    Set-Variable -Name selectStatement -Value (
    "SELECT * FROM $script:tableName`nWHERE $script:column1 IN ('$script:fileNumber')`nAND $script:column2 = 'LA';`n") -Scope script
    Set-Variable -Name insertStatement -Value (
    "INSERT INTO $script:tableName`nVALUES('$script:fileNumber','$script:updateDate','AS','LA','LB5','$script:updateDate','XX');`n") -Scope script
    Set-Variable -Name action -Value 3 -Scope script
    fileStatusFiller

    #Reject History
    switch($script:selection){
    
        ($script:selection -eq 'y'){
            #History Reject
            Set-Variable -Name comment -Value "--HISTORY" -Scope script
            Set-Variable -Name selectStatement -Value (
            "SELECT * FROM $script:tableName`nWHERE $script:column1 IN ('$script:fileNumber')`nAND $script:column2 = 'RJ';`n") -Scope script
            Set-Variable -Name deleteStatement -Value (
            "DELETE FROM $script:tableName`nWHERE $script:column1 IN ('$script:fileNumber')`nAND $script:column2 = 'RJ';`n") -Scope script
            Set-Variable -Name action -Value 1 -Scope script
            fileStatusFiller
        }#end option 1
        ($script:selection -eq 'n'){}#end option 2


    }#end switch statement

    #Control
    Set-Variable -Name tableName -Value $acf_Flo_Control -Scope script
    Set-Variable -Name comment -Value "--CONTROL" -Scope script
    Set-Variable -Name selectStatement -Value (
    "SELECT $script:column1, $script:column3`nFROM $script:tableName`nWHERE $script:column1 IN ('$script:fileNumber');`n") -Scope script
    Set-Variable -Name updateStatement -Value (
    "UPDATE $script:tableName`nSET $script:column3 = 'LA'`nWHERE $script:column1 IN ('$script:fileNumber');`n") -Scope script
    Set-Variable -Name action -Value 2 -Scope script
    fileStatusFiller

    #App
    Set-Variable -Name tableName -Value $state_Lic_App -Scope script
    Set-Variable -Name comment -Value "--APP" -Scope script
    Set-Variable -Name selectStatement -Value (
    "SELECT $script:column1, $script:column4, $script:column3`nFROM $script:tableName`nWHERE $script:column1 IN ('$script:fileNumber');`n") -Scope script
    Set-Variable -Name updateStatement -Value (
    "UPDATE $script:tableName`nSET $script:column3 = 'LA', $script:column5 = ''`nWHERE $script:column1 IN ('$script:fileNumber');`n") -Scope script
    Set-Variable -Name action -Value 2 -Scope script
    fileStatusFiller

    menuOptions


}#end function

function fileStatusFiller{

     getChangeCounter 
     addChangeComment
     addSelectStatement
     switch($script:action){
        1 {addDeleteStatement}#end option 1
        2 {addUpdateStatement}#end option 2
        3 {addInsertStatement}#end option 3
     }#end switch statement
     addSelectStatement
     #wait for more than one operation spufis
        if($script:wait -ne 'y'){parentMenu}#end if statement
    Write-Host "Done" -ForegroundColor green
     

}#end function


                    ###############################################
                    #                                ACCOUNTING                                     #
                    ###############################################

#Acconting Menu
function accountsMenu{

     Write-Host "`nACCOUNTS MAIN MENU" -ForegroundColor Cyan

    #step 1. Show menu
    Write-Host $accountsMainMenu 
    Set-Variable -Name parentMenu -Value 2 -Scope script

    #add number of possible menu answers
    Set-Variable -Name possibleValues -Value (@(1..5)) -Scope script

    userSelection

    switch ($script:selection) 
    {
        
        #fees
        1 {feeChanges}#end option 1
        #rejected py method rows
        2 {removePayMethRows}#end option 2
        #void checks
        3 {voidChecks}#end option 3
        #cancel chargebacks
        4 {}#end option 4
        #exit
        5 {menuOptions}#end option 5

    }#end switch statement

}#end function

#update fee
function updateFee{

          #update fee
            Write-Host "Select fee type" -ForegroundColor magenta
            Write-Host $feeOptions
            Set-Variable -Name possibleValues -Value (@(1..3)) -Scope script
            userSelection
            getFeeAmount
            getActSeq
            #Set-Variable -Name comment -Value "--CHANGE FEE AMOUNT" -Scope script
            Set-Variable -Name selectStatement -Value (
            "SELECT $script:column1, $script:column2, $script:column3`n,$script:column4, $script:column5`nFROM $script:tableName`nWHERE $script:column1 IN ('$script:fileNumber')`nAND $script:column2 = $script:actSeq;`n"
            ) -Scope script
            Set-Variable -Name updateStatement -Value ("UPDATE $script:tableName`nSET $script:column4 = $script:feeAmount, $script:column6 = 'LB5'`nWHERE $script:column1 IN ('$script:fileNumber')`nAND $script:column2 = $script:actSeq;`n"
            ) -Scope script
            Set-Variable -Name action -Value 2 -Scope script
            fileStatusFiller

}#end function

#delete fee
function deleteFee{

    #remove fee
            #Set-Variable -Name comment -Value "--DELETE FEE" -Scope script
                if($script:fileNumber -eq $null){
                        getFileNumber
                }
                else{
                            getActSeq
                            Set-Variable -Name selectStatement -Value (
                            "SELECT *`nFROM $script:tableName`nWHERE $script:column1 IN ('$script:fileNumber')`nAND $script:column2 IN ($script:actSeq);`n"
                            ) -Scope script
                            Set-Variable -Name deleteStatement -Value ("DELETE FROM $script:tableName`nWHERE $script:column1 IN ('$script:fileNumber')`nAND $script:column2 IN ($script:actSeq);`n"
                            ) -Scope script
                            Set-Variable -Name action -Value 1 -Scope script
                            fileStatusFiller 
                }#end if/else statement
            
            

}#end function

#insert fee
function insertFee{

            getUpdateDate
            #if file number is null
                
                            getActSeq

                            #get SSN value
                            Set-Variable -Name prompt -Value "Enter SSN value" -Scope script
                            confirmUserInput
                            $ssn = $script:userInput

                            #getFee 
                            Write-Host $feeOptions
                            Set-Variable -Name prompt -Value "Select fee type" -Scope script
                            Set-Variable -Name possibleValues -Value (@(1..3)) -Scope script
                            userSelection
                            getFeeAmount
 
                        $stateAbb = $script:fileNumber.Substring(0,2)
                        $updDate = ($updateDate+'-01.01.01.000001')
                        Set-Variable -Name action -Value 3 -Scope script
                        Set-Variable -Name selectStatement -Value (
                        "SELECT *`nFROM $script:tableName`nWHERE $script:column1 IN ('$script:fileNumber')`nAND $script:column2 IN ($script:actSeq);`n"
                        ) -Scope script
                        Set-Variable -Name insertStatement -Value (
                        "INSERT INTO $script:tableName`nVALUES ('USA','04','$script:fileNumber','$stateAbb','$script:actCode',$script:actSeq,$script:feeAmount
,'$script:updateDate','$ssn','$script:feeType','P'`n,'$updDate','LB5',0,'$script:updateDate'`n, '', '', '', '$updDate', '');`n "
                        ) -Scope script
                        fileStatusFiller 
              

                Clear-Variable -Name actCode -Scope script
            
            

}#end function

#Update/Delete/Insert Fees
function feeChanges{

    #parent Menu
    Set-Variable -Name parentMenu -Value 2 -Scope script

    #banner
    Write-Host "`nACCOUNTS MENU" -ForegroundColor Cyan

    #step 1. Show menu
    Write-Host $feesMenu

    #add number of possible menu answers
    Set-Variable -Name possibleValues -Value (@(1..4)) -Scope script

    Set-Variable -Name tableName -Value $state_Lic_Mony_Act -Scope script
    Set-Variable -Name column1 -Value "FILE_NUM" -Scope script
    Set-Variable -Name column2 -Value "ACTIVITY_SEQUENCE" -Scope script
    Set-Variable -Name column3 -Value "PAYEE_CODE" -Scope script
    Set-Variable -Name column4 -Value "ACTIVITY_AMOUNT" -Scope script
    Set-Variable -Name column5 -Value "ACTIVITY_DATE" -Scope script
    Set-Variable -Name column6 -Value "LAST_UPD_DESK" -Scope script


    #step 2
    userSelection

    switch ($script:selection) 

    {
        #Update fee
        1 {
                Set-Variable -Name comment -Value "--CHANGE FEE AMOUNT" -Scope script
                getFileNumber
                updateFee
            }#end option 1
        #Remove fee 
        2 {
                Set-Variable -Name comment -Value "--DELETE FEE" -Scope script
                getFileNumber
                deleteFee
            }#end option 2
        #inset fee
        3{
                Set-Variable -Name comment -Value "--INSERT FEE" -Scope script
                Set-Variable -Name actCode -Value 'P' -Scope script
                getFileNumber
                insertFee
           }#end option 3
        #exit
        4 {parentMenu}#end option 4
    
    } #end switch case


}#end function

#get fee amount
function getFeeAmount{
    
    switch($script:selection){

        1 {
                $amount = '-30.00'
                Set-Variable -Name feeType -Value "PFSFEE" -Scope script
           }#end option 1
        2 {
                $amount = '-69.00'
                Set-Variable -Name feeType -Value "BASFEE" -Scope script
            }#end option 2
        3 {
                Set-Variable -Name prompt -Value 'Enter fee amount' -Scope script
                confirmUserInput
                $amount = $script:userInput
                    if($script:selection -eq 3){
                        Set-Variable -Name prompt -Value "Enter Payee Name" -Scope script
                        confirmUserInput
                        Set-Variable -Name feeType -Value $script:userInput -Scope script
                    }#end if statement
            }#end option 3

    }#end switch statement
    Set-Variable -Name feeAmount -Value $amount -Scope script

}#end function

#remove Pay Meth Rows
function removePayMethRows{

    #banner
    Write-Host "`nRejected Payment Method Rows Menu" -ForegroundColor Cyan

    Write-Host "`nCurrent File List ($script:fileNumbers)" -ForegroundColor Magenta

    #step 1. Show menu
    Write-Host $simpleFilesMenu

    Set-Variable -Name action -Value 1 -Scope script

    #add number of possible menu answers
    Set-Variable -Name possibleValues -Value (@(1..5)) -Scope script

    #Set-Variable -Name tableName -Value $lic_Agent_Training -Scope script
    Set-Variable -Name tableName -Value $state_Lic_Pay_Meth -Scope script
    Set-Variable -Name column1 -Value "FILE_NUM" -Scope script
    Set-Variable -Name column2 -Value "NOTIFICATION_TYPE" -Scope script
    

    #Step 2: User adds value(s) to the list

    #Step 3: List gets added to the SPUFI
    #Step 4: List gets updated and rewritten whenever this fucntion runs, to account for new items in list

    #step 2
    userSelection

    switch ($script:selection) 

    {
        #Add File 
        1 {
                Set-Variable -Name prompt -Value "`nFile number" -Scope script
                getUserInput
                $agentFiles.Add($userInput)
                Write-Host "`nDone" -ForegroundColor Green
                removePayMethRows
           }#end option 1
        #Stop Adding
        2 { createSpufi | parentMenu}#end option 2
        #show items in list
        3 {showItemsInList | parentMenu}#end option 3
        #Clear list and start a new list
        4 {clearList | parentMenu}#end option 3
        #Exit
        5 {clearList | menuOptions}#end option 4
    
    } #end switch case

}#end function

#void checks
function voidChecks{

    Write-Host "`nVOID CHECK" 

    Set-Variable -Name actCode -Value 'V' -Scope script

    Set-Variable -Name tableName -Value $state_Lic_Mony_Act -Scope script
    Set-Variable -Name column1 -Value "FILE_NUM" -Scope script
    Set-Variable -Name column2 -Value "ACTIVITY_SEQUENCE" -Scope script
    Set-Variable -Name column3 -Value "PAYMENT_METHOD" -Scope script
    getFileNumber
    Set-Variable -Name wait -Value 'y' -Scope script
    Set-Variable -Name comment -Value "--VOID CHECK" -Scope script
    #remove FF rows
    Set-Variable -Name comment -Value "--DELETE FF ROWS" -Scope script
    Write-Host "`nREMOVE FF ROWS" 
    deleteFee
    #insert V row
    Write-Host "`nINSERT V ROW" 
    Set-Variable -Name comment -Value "--INSERT V ROW" -Scope script
    insertFee
    #delete Q row
    Write-Host "`nDELETE Q ROW" 
    Set-Variable -Name tableName -Value $state_Lic_Pay_Meth -Scope script
    Set-Variable -Name comment -Value "--DELETE Q ROW" -Scope script
     Set-Variable -Name selectStatement -Value (
     "SELECT *`nFROM $script:tableName`nWHERE $script:column1 IN ('$script:fileNumber')`nAND $script:column3 = 'Q';`n"
      ) -Scope script
      Set-Variable -Name deleteStatement -Value ("DELETE FROM $script:tableName`nWHERE $script:column1 IN ('$script:fileNumber')`nAND $script:column3 ='Q';`n"
      ) -Scope script
      Set-Variable -Name action -Value 1 -Scope script
      fileStatusFiller 
    #delete refund row
    Write-Host "`nDELETE REFUND ROW" 
     Set-Variable -Name tableName -Value $state_Lic_Refunds -Scope script
    Set-Variable -Name comment -Value "--DELETE REFUND ROW" -Scope script
    Set-Variable -Name selectStatement -Value (
     "SELECT *`nFROM $script:tableName`nWHERE $script:column1 IN ('$script:fileNumber');`n"
      ) -Scope script
      Set-Variable -Name deleteStatement -Value ("DELETE FROM $script:tableName`nWHERE $script:column1 IN ('$script:fileNumber');`n"
      ) -Scope script
      Clear-Variable -Name wait -Scope script
      fileStatusFiller
      addSpace

}#end function

                    ###############################################
                    #                                       SRR                                             #
                    ###############################################

#SRR Menu
function srrMenu{

    #banner
    Write-Host "`nSRR MENU" -ForegroundColor Cyan

    #step 1. Show menu
    Write-Host $srrMenu

    #add number of possible menu answers
    Set-Variable -Name possibleValues -Value (@(1..3)) -Scope script
    Set-Variable -Name parentMenu -Value 5 -Scope script

    #step 2
    userSelection

    switch ($script:selection) 

    {
        #Update fee
        1 {removeNotes}#end option 1
        #B7 11
        2 {fileToB711}#end option 2
        # exit
        3 {menuOptions}#end option 2

    } #end switch case

}#end function

#Remove notes
function removeNotes{

    Set-Variable -Name tableName -Value $state_Lic_Rec_Note -Scope script
    Set-Variable -Name column1 -Value "FILE_NUM" -Scope script
    Set-Variable -Name column2 -Value "AGENT_ID" -Scope script
    Set-Variable -Name column3 -Value "SOC_SEC_NUM" -Scope script
    Set-Variable -Name column4 -Value "SEQUENCE" -Scope script
    Set-Variable -Name column5 -Value "INPUT_DATE" -Scope script
    Set-Variable -Name column6 -Value "LAST_UPDATE_DESK" -Scope script
    Set-Variable -Name column7 -Value "RECRUIT_NOTES" -Scope script

    #delete note
            getFileNumber
            getAgentID
            Set-Variable -Name prompt -Value "Enter input Date" -Scope script
            confirmUserInput
            $date = $script:userInput
            getActSeq
            Set-Variable -Name comment -Value "--REMOVE NOTES" -Scope script
            Set-Variable -Name selectStatement -Value (
            "SELECT *`nFROM $script:tableName`nWHERE $script:column1 IN ('$script:fileNumber')
AND $script:column2 = '$script:agentID'`nAND $script:column5 = '$date'
AND $script:column4 IN ($script:actSeq);`n") -Scope script
            Set-Variable -Name deleteStatement -Value ("DELETE FROM $script:tableName`nWHERE $script:column1 IN ('$script:fileNumber')
AND $script:column2 = '$script:agentID'`nAND $script:column5 = '$date'
AND $script:column4 IN ($script:actSeq);`n"
            ) -Scope script
            Set-Variable -Name action -Value 1 -Scope script
            fileStatusFiller

}#end function

#B7 11
function fileToB711{

    Set-Variable -Name tableName -Value $srr_Cases -Scope script
    Set-Variable -Name column1 -Value "FILE_NUM" -Scope script
    Set-Variable -Name column2 -Value "CASE_STATUS" -Scope script
    
    getFileNumber
    
    Write-Host $caseStatuses
    Set-Variable -Name prompt -Value "Select case status" -Scope script
    userSelection
    switch($script:selection){
        1 {$status = 'APL'}#end option 1
        2 {$status = 'IPR'}#end option 2
    }#end switch statement
    Set-Variable -Name comment -Value "--SEND FILE TO B7 11" -Scope script
    Set-Variable -Name selectStatement -Value (
     "SELECT *`nFROM $script:tableName`nWHERE $script:column1 IN ('$script:fileNumber')`nAND $script:column2 = 'DLT';`n"
     ) -Scope script
    Set-Variable -Name updateStatement -Value (
    "UPDATE $script:tableName`nSET $script:column2 = '$status'`nWHERE $script:column1 IN ('$script:fileNumber')`nAND $script:column2 = 'DLT';`n"
    ) -Scope script
    Set-Variable -Name action -Value 2 -Scope script
    fileStatusFiller
    
}#end function


                    ###############################################
                    #                                  OWNERSHIP                                      #
                    ###############################################

#ownwership
function ownership{
    
    Set-Variable -Name parentMenu -Value 7 -Scope script
    ownershipInfo
    setCounterToLocal
    Set-Variable -Name wait -Value 'y' -Scope script

        for($i = 1; $i -lt 8; $i++){

            Set-Variable -Name step -Value $i -Scope script
            ownershipStatements
            ownershipFiller

        }#end for statement

    Clear-Variable -Name step -Scope script

}#end function

#ownership info
function ownershipInfo{

    Set-Variable -Name column1 -Value "AGENT_ID" -Scope script
    #seller's Agent ID
    Set-Variable -Name prompt -Value "Please enter Seller's agent ID" -Scope script
    confirmUserInput
    Set-Variable -Name sellerAgentID -Value $script:userInput -Scope script
    #temporary ID
    Set-Variable -Name prompt -Value "Please enter Seller's Temporary agent ID" -Scope script
    confirmUserInput
    Set-Variable -Name sellerTempAgentID -Value $script:userInput -Scope script
    #Canada?
    Set-Variable -Name prompt -Value "Is this a Canada case" -Scope script
    yesNoQuestion
    Set-Variable -Name canadaOhCanada -Value $script:selection -Scope script

}#end function

#filler
function ownershipFiller{

    Set-Variable -Name selectStatement -Value (
     "SELECT COUNT($script:column1)`nFROM $script:tableName`nWHERE $script:column1 = '$sellerAgentID';`n"
     ) -Scope script
    Set-Variable -Name updateStatement -Value (
    "UPDATE $script:tableName`nSET $script:column1 = '$sellerTempAgentID'`nWHERE $script:column1 = '$sellerAgentID';`n"
    ) -Scope script
    Set-Variable -Name action -Value 2 -Scope script
    fileStatusFiller

}#end function

#statements
function ownershipStatements{
    
     switch($script:step)
    {
    #ACF_FLO_CONTROL
        1 {
                   Set-Variable -Name tableName -Value $acf_Flo_Control -Scope script
                   Set-Variable -Name comment -Value "--ACF FLO CONTROL" -Scope script
    
                        if($canadaOhCanada -eq 'y'){
                            Set-Variable -Name tableName -Value $acf_Flo_Control_Canada -Scope script
                            Set-Variable -Name comment -Value "--ACF FLO CONTROL CANADA" -Scope script

                        }#end if statement

          }#end option 1
    #RECRUIT_CONTRACT
        2 {
                   Set-Variable -Name tableName -Value $recruit_Contract -Scope script
                   Set-Variable -Name comment -Value "--RECRUIT CONTRACT" -Scope script
                   
          }#end option 2
    #RECRUIT_DATA
        3 {
                   Set-Variable -Name tableName -Value $recruit_Data -Scope script
                   Set-Variable -Name comment -Value "--RECRUIT DATA" -Scope script

          }#end option 3
    #RECRUIT_PRODUCT
        4 {
                   Set-Variable -Name tableName -Value $recruit_Product -Scope script
                   Set-Variable -Name comment -Value "--RECRUIT PRODUCT" -Scope script
                   
          }#end option 4
    #STATE_LIC_CLIENT
        5 {
                   Set-Variable -Name tableName -Value $state_Lic_Client -Scope script
                   Set-Variable -Name comment -Value "--STATE LIC CLIENT" -Scope script
                   
          }#end option 5
    #STATE_LIC_TEMP
        6 {
                   Set-Variable -Name tableName -Value $state_Lic_Temp -Scope script
                   Set-Variable -Name comment -Value "--STATE LIC TEMP" -Scope script
                   
          }#end option 6
    #STATE_LIC_REC_NOTE
        7 {
                   Set-Variable -Name tableName -Value $state_Lic_Rec_Note -Scope script
                   Set-Variable -Name comment -Value "--STATE LIC NOTE" -Scope script

                   Set-Variable -Name wait -Value 'n' -Scope script
                   
          }#end option 7
    }#end switch statement

}#end function 


                    ###############################################
                    #                           SSN CORRECTIONS                                       #
                    ###############################################

#ssn corrections main menu
function ssnCorrectionsMainMenu{

    Write-Host "`nSSN Corrections Main Menu" -ForegroundColor Cyan
    Write-Host $ssnCorrectionsMenu -ForegroundColor DarkYellow
    Set-Variable -Name possibleValues -Value (@(1..5)) -Scope script

    #step 3: allow selection
    userSelection

    #step 5: switch statement
    switch ($script:selection) 
    {
        
        #Bogus SSN--update 
        1 {
                Set-Variable -Name bogusSSNFlag -Value 'y' -Scope script
                setCounterToLocal
                gatherInformation   
                ssnCorrections  
           }#end option 1
        #Double agent --delete wrong ssn
        2 {
                setCounterToLocal
                Set-Variable -Name ssnCorrections -Value 'y' -Scope script
                gatherInformation
                if($script:auto -eq 'n'){ssnCorrections}#end if statament     
            }#end option 2
        #New SSN/AgentID--delete wrong ssn (flip targer)
        3 {
                Set-Variable -Name newInfo -Value 'y' -Scope script
                setCounterToLocal
                gatherInformation   
                ssnCorrections
           }#end option 3
        #New SSN only
        4 {
                Set-Variable -Name newSSN -Value 'y' -Scope script
                setCounterToLocal
                gatherInformation   
                ssnCorrections
            }#end option 4
        #exit
        5 {
                setCounterToTotal
                menuOptions
            }#end option 4


    }#end switch statement

}#end function

#gather information
function gatherInformation{

            Set-Variable -Name prompt -Value "Start a new ssn correction?" -Scope script
            yesNoQuestion
            if($script:selection -eq 'y')
            {
             #step 1: Gather information
             #Correct SSN
             Set-Variable prompt -Value "`nCorrect SSN " -Scope script
             getUserInput
             Set-Variable correctSSN -Value $userInput -Scope script
             $ssnInfo.Add("$script:correctSSN")
             #correct agentID
             Set-Variable prompt -Value "`nCorrect Agent ID " -Scope script
             getUserInput
             Set-Variable correctAgentID -Value $userInput -Scope script
             $ssnInfo.Add("$script:correctAgentID")
             #correct Client ID
             Set-Variable prompt -Value "`nCorrect Client ID " -Scope script
             getUserInput
             Set-Variable correctClientID -Value $userInput -Scope script
             $ssnInfo.Add("$script:correctClientID")

             #filled out
             Set-Variable -Name filled -Value 'y' -Scope script
             
                if($script:ssnCorrections -eq 'y' -or $script:newInfo -eq 'y') {

                        #Incorrect SSN
                        Set-Variable prompt -Value "`nIncorrect SSN " -Scope script
                        getUserInput
                        Set-Variable incorrectSSN -Value $userInput -Scope script
                        $ssnInfo.Add("$script:incorrectSSN")

                        #fields needed for other scenarios
                        if($script:ssnCorrections -eq 'y' -or $script:newInfo -eq 'y'){
                        #incorrect Agent ID
                        Set-Variable prompt -Value "`nIncorrect Agent ID " -Scope script
                        getUserInput
                        Set-Variable incorrectAgentID -Value $userInput -Scope script
                        $ssnInfo.Add("$script:incorrectAgentID")
                         #incorrect Client ID
                        Set-Variable prompt -Value "`nIncorrect Client ID " -Scope script
                        getUserInput
                        Set-Variable incorrectClientID -Value $userInput -Scope script
                        $ssnInfo.Add("$script:incorrectClientID")
                        #old File Number
                        Set-Variable prompt -Value "`nOld File Number " -Scope script
                        getUserInput
                        Set-Variable oldFileNumber -Value $userInput -Scope script
                        $ssnInfo.Add("$script:oldFileNumber")
                        #new File Number
                        Set-Variable prompt -Value "`nNew File Number " -Scope script
                        getUserInput
                        Set-Variable newFileNumber -Value $userInput -Scope script
                        $ssnInfo.Add("$script:newFileNumber")
                        
                        #has recruits
                        Set-Variable -Name prompt -Value "Recruits under new agent id?" -Scope script
                        yesNoQuestion
                        Set-Variable -Name hasRecruits -Value $script:selection -Scope script

                        
                    }#end if statement
           }
                else{
                    Set-Variable -Name prompt -Value "Last Name initial" -Scope script
                    confirmUserInput
                    Set-Variable -Name initial -Value $script:userInput -Scope script
                    $bogus = $script:correctSSN.ToString().substring(0,8) + $script:initial
                    $bogus
                    Set-Variable -Name bogusSSN -Value $bogus -Scope script
                }#end if/esle function

                #save info to text file for reusability
                saveSSNInfo
            }#end if statement

            if($script:selection -eq 'n')
            {
                 Set-Variable -Name prompt -Value "Load from file?" -Scope script
                 yesNoQuestion
                 if($script:selection -eq 'y'){loadSSNInfo}else{Write-Host "`nUsing info from local memory" -ForegroundColor Green}#end if statement
            }#end if statement

            #see which row is the oldest
            if($script:bogusSSNFlag -ne 'y'){
                        Set-Variable -Name prompt -Value "Is the correct ssn the oldest row?" -Scope script
                        yesNoQuestion
                        if($script:selection -eq 'y'){

                        #normal scenario
                        Set-Variable -Name oldestRow -Value $script:correctSSN -Scope script
                        Set-Variable -Name newestRow -Value $script:incorrectSSN -Scope script }
                        else{
                
                        #inverse: new ssn is correct
                        Set-Variable -Name oldestRow -Value $script:incorrectSSN -Scope script
                        Set-Variable -Name newestRow -Value $script:correctSSN -Scope script
                
                    }#end if/else statement
                    }#end inner if statement

             #automation option
             Set-Variable prompt -Value "`nAutomate? " -Scope script
             yesNoQuestion
             Set-Variable auto -Value $script:selection -Scope script

             if($script:auto -eq 'y'){ssnAutomation}#end if statement

}#end function

#Main loop. Ask if SSN appeared in the main App tables
function ssnCorrections{
    
    resetLocalCounter

    #Step 2: add number of possible menu answers
    Set-Variable -Name possibleValues -Value (@(1..9)) -Scope script

    #step 3: allow selection
    if($script:auto -eq 'n')
        {
            #banner
            Write-Host "`nApp Tables Menu" -ForegroundColor Cyan

            #STEP 1: show menu
            Write-Host $appTables 

            userSelection
      }#end if function

    #step 5: switch statement
    switch ($script:selection) 

    {
        #APP 100
        1 {
                Set-Variable -Name marker -Value "--APP 100`n" -Scope script
                addChangeMarker
                if($script:auto -eq 'n'){ssnCorrectionsApp100}
            }#end option 1
        #APP 102
        2 {
                Set-Variable -Name marker -Value "--APP 102`n" -Scope script
                addChangeMarker
                if($script:auto -eq 'n'){ssnCorrectionsApp102}     
            }#end option 2
        #APP 201
        3 {
                Set-Variable -Name marker -Value "--APP 201`n" -Scope script
                addChangeMarker
                if($script:auto -eq 'n'){ssnCorrectionsApp201}
            }#end option 3
        #APP 213
        4 {
                Set-Variable -Name marker -Value "--APP 213`n" -Scope script
                addChangeMarker
                if($script:auto -eq 'n'){ssnCorrectionsApp213}
           }#end option 4
        #APP 267
        5 {
                Set-Variable -Name marker -Value "--APP 267`n" -Scope script
                addChangeMarker
                if($script:auto -eq 'n'){ssnCorrectionsApp267}
           }#end option 5
        #APP 300
        6 {
                Set-Variable -Name marker -Value "--APP 300`n" -Scope script
                addChangeMarker
                if($script:auto -eq 'n'){ssnCorrectionsApp300}
           }#end option 6
        #APP 318
        7 {
                Set-Variable -Name marker -Value "--APP 318`n" -Scope script
                addChangeMarker
                if($script:auto -eq 'n'){ssnCorrectionsApp318}
           }#end option 7
        #APP 101
        8 {
                Set-Variable -Name marker -Value "--APP 101`n" -Scope script
                addChangeMarker
                if($script:auto -eq 'n'){ssnCorrectionsApp101}
        }#end option 8
        #EXIT
        9 { 
                setCounterToTotal
                menuOptions
             }#end option 8
    
    } #end switch case

}#end function

#automation
function ssnAutomation{

    #traverse each table option
    for($i = 1; $i -lt 9; $i++)
    {
        Set-Variable -Name table -Value $i -Scope script
        Set-Variable -Name selection -Value $i -Scope script

        switch($script:table)
            {
                    #APP 100
                1 {
                        ssnCorrections
                        Set-Variable -Name end -Value 6 -Scope script
                        automationFiller   
                    }#end option 1
                    #APP 102
                2 {
                        ssnCorrections
                        Set-Variable -Name end -Value 16 -Scope script
                        automationFiller
                          
                    }#end option 2
                    #APP 201
                3 {
                        ssnCorrections
                        Set-Variable -Name end -Value 4 -Scope script
                        automationFiller
                   }#end option 3
                   #APP 213
                4 {
                        ssnCorrections
                        Set-Variable -Name end -Value 7 -Scope script
                        automationFiller
                   }#end option 4
                #APP 267
                5 {
                        ssnCorrections
                        Set-Variable -Name end -Value 5 -Scope script
                        automationFiller
                   }#end option 5
                #APP 300
                6 {
                        ssnCorrections
                        Set-Variable -Name end -Value 10 -Scope script
                        automationFiller
                    }#end option 6
                #APP 318
                7 {
                        ssnCorrections
                        Set-Variable -Name end -Value 4 -Scope script
                        automationFiller
                    }#end option 7
                #APP 101
                8 {
                        if($script:bogusSSNFlag -ne 'y'){
                            ssnCorrections
                            Set-Variable -Name end -Value 3 -Scope script
                            automationFiller
                        }
                }#end option 8
            }#end switch statement
    }#end for statement

    Set-Variable -Name selection -Value 9 -Scope script
    ssnCorrections

}#end function

#automation companion
function automationFiller{

        for($j = 1; $j -lt $script:end; $j++ )
             {
                Set-Variable -Name selection -Value $j -Scope script
                switch($script:table)
                {
                    1 {ssnCorrectionsApp100}#end option 1
                    2 {ssnCorrectionsApp102}#end option 2
                    3 {ssnCorrectionsApp201}#end option 3
                    4 {ssnCorrectionsApp213}#end option 4
                    5 {ssnCorrectionsApp267}#end option 5
                    6 {ssnCorrectionsApp300}#end option 6
                    7 {ssnCorrectionsApp318}#end option 7
                    8 {ssnCorrectionsApp101}#end option 8
                }#end switch statement
                
              }#end for statement
}#end function

#APPCODE 100
function ssnCorrectionsApp100{
    
    #check if query results show ssn listed in the following tables
     #Step 2: add number of possible menu answers
     Set-Variable -Name possibleValues -Value (@(1..5)) -Scope script
     Set-Variable -Name column1 -Value "CLIENT_ID" -Scope script
     Set-Variable -Name column2 -Value "CLIENT_NAME" -Scope script
     Set-Variable -Name column3 -Value "SOC_SEC_NUM" -Scope script
     Set-Variable -Name column4 -Value "AGENT_ID" -Scope script
     Set-Variable -Name column5 -Value "LICENSE_COMP_NUM" -Scope script
     Set-Variable -Name column6 -Value "EXPIRATION_DATE" -Scope script
     Set-Variable -Name column7 -Value "PFS_AGENT_ID" -Scope script

     #step 3: allow selection
     if($script:auto -ne 'y')
        {
        #banner
        Write-Host "`nApp 100 Tables Menu" -ForegroundColor Cyan

        #STEP 1: show menu
        Write-Host $app100Tables 

        userSelection
      }#end if function

     #step 5: switch statement
     switch ($script:selection) 
        {
        #CLIENT_INFO
        #ONLY ONE ROW. REMOVE INCORRECT ROW AND KEEP CORRECT ID AND SSN
        #NEW SSN/NEW AGENT ID CASES: UPDATE STATEMENT WITH BOTH CORRECT INFO TO COVER EITHER CASE
        1 {
            
                Set-Variable -Name tableName -Value $client_Info -Scope script

                #bogus SSN. Simply update
                if($script:bogusSSNFlag -eq 'y' -or $script:newSSN -eq 'y'){
                    Set-Variable -Name comment -Value "--CLIENT INFO" -Scope script
                    Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column2
,$script:column3
FROM $script:tableName
WHERE $script:column3 = '$script:correctSSN'
AND $script:column1 = $script:correctClientID;`n") -Scope script
                    if($script:newSSN){
                        Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column3 = '$script:correctSSN'
WHERE $script:column3 ='$script:incorrectSSN'
AND $script:column1 = $script:correctClientID;`n") -Scope script
                    }
                    else{
                    Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column3 = '$script:bogusSSN'
WHERE $script:column3 ='$script:correctSSN'
AND $script:column1 = $script:correctClientID;`n") -Scope script
                    }#end if/else statement
                    Set-Variable -Name action -Value 2 -Scope script
                    filler

                    #exit
                     addSpace  
                     if($script:auto -eq 'n'){ssnCorrections}#end if statement
                }
                #regular SSN correction. If new row is incorrect, delete new row. If new row contains correct ssn, delete new row and update ssn in old row?
                else{
                            #Delete incorrect SSN row
                            Set-Variable -Name comment -Value "--REMOVE INCORRECT CLIENT ID AND/OR SSN
--INCORRECT CLIENT ID: $script:incorrectClientID  
--INCORRECT SSN: $script:incorrectSSN" -Scope script
#There is no agent ID involved in this table. Only showing the row being deleted to save space in the SPUFI review, unless SSN and client ID do not match
                            Set-Variable -Name selectStatement -Value (
"SELECT *
FROM $script:tableName
WHERE $script:column3 = '$script:incorrectSSN';`n") -Scope script
                            Set-Variable deleteStatement -Value (
"DELETE FROM $script:tableName
WHERE $script:column3 = '$script:incorrectSSN';`n") -Scope script
                            Set-Variable -Name action -Value 1 -Scope script
                            filler

                            #update if new SSN/ClientID
                            #new ssn should be the correct ssn in this cases
                            if($script:newInfo -eq 'y'){

                            Set-Variable -Name comment -Value "
--UPDATE SSN/CLIENT ID
--CORRECT CLIENT ID: $script:correctClientID  
--CORRECT SSN: $script:correctSSN" -Scope script
#There is no agent ID involved in this table. Only showing the row being deleted to save space in the SPUFI review, unless SSN and client ID do not match
                            Set-Variable -Name selectStatement -Value (
"SELECT $script:column3, $script:column1
FROM $script:tableName
WHERE $script:column3 = '$script:correctSSN';`n") -Scope script
                            Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = $script:correctClientID
WHERE $script:column3 = '$script:correctSSN';`n") -Scope script
                            Set-Variable -Name action -Value 2 -Scope script
                            filler

                            }#end if statement

                }#end if/else statement

                   if($script:auto -eq 'n'){ssnCorrectionsApp100}#end if statement
          }#end option 1
        #CLIENT_LICENSE
        #MULTIPLE ROWS. UPDATE DO NOT DELETE
        #THERE SHOULD NOT BE DUPLICATE ACTIVE LICENSE 60 ROWS. IF THERE IS, DELETE ORIGINAL ROW AND UPDATE NEW  ONE.
        #ACTIVE LICENSE OTHER THAN 60. DO NOT DELETE
        2 {
                if($script:ssnCorrections -eq 'y' -or $script:newInfo -eq 'y'){
                $message = 
                "`nCLIENT LICENSE NOTE:
Should not have duplicate ACTIVE License Comp Num 60 rows (expiration date 12-31-9999). 
If there will be duplicate ACTIVE 60 rows, delete one"
                Set-Variable -Name tableName -Value $client_License -Scope script
                Write-Host $message -ForegroundColor Yellow
                Set-Variable -Name prompt -Value "Duplicate License 60 rows?" -Scope script
                yesNoQuestion
                Set-Variable -Name duplicateRow -Value $script:selection 
 
                    #if there are duplicate ACTIVE license 60 rows. Delete the oldest one and update new one
                    if($duplicateRow -eq 'y'){
                        
                        #delete old/original row
                        Set-Variable -Name comment -Value (
"--NO ACTIVE LICENSE NUM 60 DUPLICATES ALLOWED
--DELETE OLDEST ACTIVE LICENSE 60 ROW`n--LEAVE UNACTIVE ROWS"
                        ) -Scope script
                        #Show both to compare wich one is the oldest one
                        Set-Variable -Name selectStatement -Value (
"SELECT *
FROM $script:tableName
WHERE $script:column1= $script:correctClientID
AND $script:column5 = 60
AND $script:column6 = '9999-12-31';`n"
                        ) -Scope script
                        #usually the oldest one is the correct info--may need to change it later
                        Set-Variable deleteStatement -Value (
"DELETE FROM $script:tableName
WHERE $script:column1 = $script:correctClientID
AND $script:column5 = '60'
AND $script:column6 = '9999-12-31';`n"
                         ) -Scope script
                        Set-Variable -Name action -Value 1 -Scope script
                        filler

                        #part 2: update new row to correct values
                        #Showing before and after. Looks better
                        Set-Variable -Name comment -Value "--UPDATE ROW TO CORRECT CLIENT ID: $script:correctClientID" -Scope script
                        Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column5
,$script:column6
FROM $script:tableName
WHERE $script:column1 IN ($script:incorrectClientID, $script:correctClientID);`n") -Scope script 
                        Set-Variable updateStatement -Value ("
UPDATE $script:tableName
SET $script:column1 ='$script:correctClientID'
WHERE $script:column1 = $script:incorrectClientID;`n"
                         ) -Scope script
                        Set-Variable -Name action -Value 2 -Scope script
                        filler
                        
                    }
                    else{

                        Set-Variable -Name comment -Value "--UPDATE ONLY. DO NOT DELETE" -Scope script
                        Set-Variable -Name selectStatement -Value ("
SELECT $script:column1, $script:column5, $script:column6
FROM $script:tableName
WHERE $script:column1 IN ($script:incorrectClientID, $script:correctClientID);`n"
                        ) -Scope script
                        Set-Variable updateStatement -Value ("
UPDATE $script:tableName
SET $script:column1 ='$script:correctClientID'
WHERE $script:column1 = '$script:incorrectClientID';`n"
                         ) -Scope script
                        Set-Variable -Name action -Value 2 -Scope script
                        filler

                    }#end if/else statement
                    }#end outer if statement

                if($script:auto -eq 'n'){ssnCorrectionsApp100}#end if statement
          }#end option 2
        #CLIENT_TO_AGENT
        #ONE ROW ON MOST CASES. DELETE INCORRECT INFO ROW 
        3 {
                if($script:ssnCorrections -eq 'y' -or $script:newInfo -eq 'y'){
                Set-Variable -Name tableName -Value $client_To_Agent -Scope script
                Set-Variable -Name comment -Value "--REMOVE INCORRECT INFO ROW
--INCORRECT CLIENT ID: $script:incorrectClientID
--INCORRECT AGENT ID: $script:incorrectAgentID" -Scope script
                Set-Variable -Name selectStatement -Value ("
SELECT *
FROM $script:tableName
WHERE $script:column1 = $script:incorrectClientID;`n"
                ) -Scope script
                Set-Variable deleteStatement -Value (
"DELETE FROM $script:tableName
WHERE $script:column1 = $script:incorrectClientID;`n"
                  ) -Scope script
                Set-Variable -Name action -Value 1 -Scope script
                filler

                #if ssn is correct but agent Id is not, update
                if($script:newInfo -eq 'y')
                {
                    Set-Variable -Name comment -Value "
--UPDATE AGENT ID/CLIENT ID
--CORRECT CLIENT ID: $script:correctClientID
--CORRECT AGENT ID: $script:correctAgentID" -Scope script
                    Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column4, $script:column7
FROM $script:tableName
WHERE $script:column1 IN ($script:incorrectClientID, $script:correctClientID);`n"
                    ) -Scope script
                    Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column4 = '$script:correctAgentID'
,$script:column7 = '$script:correctAgentID'
WHERE $script:column1 = $script:correctClientID;`n"
                      ) -Scope script
                    Set-Variable -Name action -Value 2 -Scope script
                    filler
                }#end if statement
                }#end outer if statement

                if($script:auto -eq 'n'){ssnCorrectionsApp100}#end if statement
            }#end option 3
        4 {if($script:ssnCorrections -eq 'y' -or $script:newInfo -eq 'y'){app100Optionals}}#end option 4
        #EXIT
        5 { 
            addSpace  
            if($script:auto -eq 'n'){ssnCorrections}#end if statement
           }#end option 6
    
    } #end switch case

}#end function

#APP100 OPTIONAL
function app100Optionals{

        #banner
             Write-Host "`nApp 100 Optional Tables Menu" -ForegroundColor Cyan

            #STEP 1: show menu
            Write-Host $app100OptionalTables 

            Set-Variable -Name possibleValues -Value (@(1..3)) -Scope script

             userSelection

             switch($script:selection)
             {
                    1 {
                        if($script:auto -eq 'n')
                        {ssnCorrectionsApp100}#end if statement
                       }#end option 4
                    #SRR_CASES
                    #CLIENT_ID SHOULD MATCH ALL OTHER TABLES
                    #--UPDATE ONLY --DO NOT DELETE
                    2 {
                        #srr_cases
                        Set-Variable -Name tableName -Value $srr_Cases -Scope script
                        Set-Variable -Name comment -Value "--UPDATE CLIENT ID ONLY" -Scope script
                        Set-Variable -Name selectStatement -Value (
                        "SELECT $script:column1`nFROM $script:tableName`nWHERE $script:column1 IN ($script:incorrectClientID, $script:correctClientID);`n") -Scope script
                        Set-Variable updateStatement -Value (
                        "UPDATE $script:tableName`nSET $script:column1 = $script:correctClientID`nWHERE $script:column1 = $script:incorrectClientID;`n") -Scope script
                        Set-Variable -Name action -Value 2 -Scope script
                        filler

                        #srr email
                        Set-Variable -Name tableName -Value $srr_Email_Requests -Scope script
                        Set-Variable -Name selectStatement -Value (
                        "SELECT $script:column1`nFROM $script:tableName`nWHERE $script:column1  IN ($script:incorrectClientID, $script:correctClientID);`n") -Scope script
                        Set-Variable updateStatement -Value (
                        "UPDATE $script:tableName`nSET $script:column1 = $script:correctClientID`nWHERE $script:column1 = $script:incorrectClientID;`n") -Scope script
                        filler

                        if($script:auto -eq 'n'){ssnCorrectionsApp100}#end if statement
           }#end option 5
                    #exit
                    3 {}#option 4

           }#end switch statement

}#end function

#APPCODE 102
function ssnCorrectionsApp102{

     #Step 2: add number of possible menu answers
     Set-Variable -Name possibleValues -Value (@(1..15)) -Scope script
     Set-Variable -Name column1 -Value "SOC_SEC_NUM" -Scope script
     Set-Variable -Name column2 -Value "AGENT_ID" -Scope script
     Set-Variable -Name column3 -Value "FILE_NUM" -Scope script
     Set-Variable -Name column4 -Value "CLIENT_ID" -Scope script
     Set-Variable -Name column5 -Value "ADDRESS_SEQUENCE" -Scope script
     Set-Variable -Name column6 -Value "RECRUITER" -Scope script
     Set-Variable -Name column7 -Value "MANAGER_ID" -Scope script
     Set-Variable -Name column8 -Value "RECRUITER_ID" -Scope script
     Set-Variable -Name column9 -Value "RECRUITER_AGENT_ID" -Scope script
     Set-Variable -Name column10 -Value "TRAINER_ID" -Scope script
     Set-Variable -Name column11 -Value "REQUIRED_FORM" -Scope script
     Set-Variable -Name column12 -Value "LASTNAME_FIRSTNAME" -Scope script
     Set-Variable -Name column13 -Value "LAST_NAME" -Scope script
     Set-Variable -Name column14 -Value "FIRST_NAME" -Scope script
     Set-Variable -Name column15 -Value "REFUND_NAME" -Scope script

     #step 3: allow selection
     if($script:auto -ne 'y')
        {
            #banner
             Write-Host "`nApp 102 Tables Menu" -ForegroundColor Cyan

            #STEP 1: show menu
            Write-Host $app102Tables 

             userSelection

      }#end if function

     #step 5: switch statement
     switch ($script:selection) 

    {

        #ACF_FLO_CONTROL
        #UPDATE TO CORRECT SSN AND AGENT ID
        #DO NOT DELETE - UPDATE ONLY
        #CAN HAVE MULTIPLE ROWS
        1 {
                Set-Variable -Name tableName -Value $acf_Flo_Control -Scope script

                if($script:bogusSSNFlag -eq 'y' -or $script:newSSN -eq 'y'){
                    Set-Variable -Name comment -Value "--ACF FLO CONTROL" -Scope script
                    Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column2
,$script:column3, $script:column12
FROM $script:tableName
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script
                    if($script:newSSN -eq 'y'){ 
                    Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
WHERE $script:column1 ='$script:incorrectSSN';`n") -Scope script
                    }
                    else{
                    Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:bogusSSN'
WHERE $script:column1 ='$script:correctSSN';`n") -Scope script
                    }#end if/else statement
                    Set-Variable -Name action -Value 2 -Scope script
                    filler

                }else{

                Set-Variable -Name comment -Value "--CAN HAVE MULTIPLE ROWS
--UPDATE WITH INFO
--CORRECT SSN: $script:correctSSN
--CORRECT AGENT ID: $script:correctAgentID" -Scope script
                Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column2
FROM $script:tableName
WHERE $script:column1 IN ('$script:incorrectSSN','$script:correctSSN');`n"
                ) -Scope script
                Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
,$script:column2 = '$script:correctAgentID'
WHERE $script:column1 IN ('$script:incorrectSSN','$script:correctSSN');`n"
                ) -Scope script
                Set-Variable -Name action -Value 2 -Scope script
                filler

                #New agent ID has recruits
                if($script:hasRecruits -eq 'y'){

                        Set-Variable -Name comment -Value "--UPDATE RECRUITER TO CORRECT AGENT ID" -Scope script
                        Set-Variable -Name selectStatement -Value (
"SELECT $script:column2 AS ""RECRUIT"", $script:column6
FROM $script:tableName
WHERE $script:column6 IN ('$script:incorrectAgentID', '$script:correctAgentID');`n"
                        ) -Scope script
                        Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column6 = '$script:correctAgentID'
WHERE $script:column6 = '$script:incorrectAgentID';`n"
                        ) -Scope script
                        Set-Variable -Name action -Value 2 -Scope script
                        filler

                    }#end if statement

               if($script:auto -eq 'n'){ssnCorrectionsApp102}#end if statement
               }#end if/else statement

          }#end option 1

        #RCF_FIELD_TRANS
        #SOC_SEC_NUM -  SHOULD MATCH OTHER TABLES WITH CORRECT INFO 
        #UPDATE ONLY WITH CORRECT SSN
        #CAN HAVE MULTIPLE ROWS
        2 {
                Set-Variable -Name tableName -Value $rcf_Field_Trans -Scope script

                if($script:bogusSSNFlag -eq 'y' -or $script:newSSN -eq 'y'){

                Set-Variable -Name comment -Value "--RCF FIELD TRANS" -Scope script
                Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column13, $script:column14
FROM $script:tableName
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script
                if($script:newSSN -eq 'y'){
                Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
WHERE $script:column1 = '$script:incorrectSSN';`n") -Scope script
                }
                else{
                Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:bogusSSN'
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script
                }#end if/else statement
                Set-Variable -Name action -Value 2 -Scope script
                filler

                }
                else{

                Set-Variable -Name comment -Value "--UPDATE WITH CORRECT SSN: $script:correctSSN" -Scope script
                Set-Variable -Name selectStatement -Value (
"SELECT $script:column1
FROM $script:tableName
WHERE $script:column1 IN ('$script:incorrectSSN','$script:correctSSN');`n") -Scope script
                Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
WHERE $script:column1 = '$script:incorrectSSN';`n") -Scope script
                Set-Variable -Name action -Value 2 -Scope script
                filler

                #New agent ID has recruits
                if($script:hasRecruits -eq 'y'){
                        
                        Set-Variable -Name comment -Value "--UPDATE MANAGER ID TO CORRECT AGENT ID" -Scope script
                        Set-Variable -Name selectStatement -Value (
                        "SELECT $script:column7`nFROM $script:tableName`nWHERE $script:column7 IN ('$script:incorrectAgentID', '$script:correctAgentID');`n"
                        ) -Scope script
                        Set-Variable -Name updateStatement -Value (
                        "UPDATE $script:tableName`nSET $script:column7 = '$script:correctAgentID'`nWHERE $script:column7 = '$script:incorrectAgentID';`n"
                        ) -Scope script
                        Set-Variable -Name action -Value 2 -Scope script
                        filler

                    }#end if statement

                if($script:auto -eq 'n'){ssnCorrectionsApp102}#end if statement
                }#end if/else statement

          }#end option 2

        #RECRUIT_CONTRACT
        #AGENT_ID - SHOULD MATCH OTHER TABLES WITH CORRECT INFO
        #DELETE INCORRECT AGENT_ID - THIS TABLE WILL REBUILD AT MONTH END WITH ACTIVE AGENT_ID
        #ONLY 1 ROW
        3 {
           
                if($script:ssnCorrections -eq 'y' -or $script:newInfo -eq 'y'){
                #delete incorrect agent ID
                Set-Variable -Name tableName -Value $recruit_Contract -Scope script

                Set-Variable -Name comment -Value "--REMOVE ROW WITH INCORRECT AGENT ID: $script:incorrectAgentID" -Scope script
                Set-Variable -Name selectStatement -Value (
"SELECT *
FROM $script:tableName
WHERE $script:column2 = '$script:incorrectAgentID';`n") -Scope script
                Set-Variable deleteStatement -Value (
"DELETE FROM $script:tableName
WHERE $script:column2 = '$script:incorrectAgentID';`n" ) -Scope script
                Set-Variable -Name action -Value 1 -Scope script
                filler

                    #New agent ID has recruits
                    if($script:hasRecruits -eq 'y'){
                        
                        Set-Variable -Name comment -Value "--UPDATE RECRUITER ID TO CORRECT AGENT ID" -Scope script
                        Set-Variable -Name selectStatement -Value (
 "SELECT $script:column2 AS ""RECRUIT"", $script:column8
 FROM $script:tableName
WHERE $script:column8 IN ('$script:incorrectAgentID','$script:correctAgentID');`n"
                        ) -Scope script
                        Set-Variable -Name updateStatement -Value (
                        "UPDATE $script:tableName`nSET $script:column8 = '$script:correctAgentID'`nWHERE $script:column8 = '$script:incorrectAgentID';`n"
                        ) -Scope script
                        Set-Variable -Name action -Value 2 -Scope script
                        filler

                    }#end if statement

                if($script:auto -eq 'n'){ssnCorrectionsApp102}#end if statement
                }#end if statement

           }#end option 3

        #RECRUIT_DATA
        #SOC_SEC_NUM, FILE_NUM - SSN SHOULD MATCH OTHER TABLES AND HAVE CURRENT FILE NUM
        #DELETE NEW ROW AND UPDATE OLD ROW TO THE CORRECT FILE NUMBER 
        #UPDATE OLDEST ROW WITH CURRENT (PENDING) FILE_NUM AND CORRECT SSN
        #ONLY ONE ROW ALLOWED
        4 {
               #part 1: delete row with new file number (usually one with incorrect info)
                Set-Variable -Name tableName -Value $recruit_Data -Scope script

                if($script:bogusSSNFlag -eq 'y' -or $script:newSSN -eq 'y'){

                Set-Variable -Name comment -Value "--RECRUIT DATA" -Scope script
                Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column2, $script:column3
FROM $script:tableName
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script
                if($script:newSSN -eq 'y'){
                Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
WHERE $script:column1 = '$script:incorrectSSN';`n") -Scope script
                }
                else{
                Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:bogusSSN'
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script
                }#end if/else statement
                Set-Variable -Name action -Value 2 -Scope script
                filler

                }
                else{

                Set-Variable -Name comment -Value "--REMOVE NEW FILE" -Scope script
                Set-Variable -Name selectStatement -Value (
"SELECT *
FROM $script:tableName
WHERE $script:column1 = '$script:newestRow';`n"
                ) -Scope script
                Set-Variable deleteStatement -Value (
"DELETE FROM $script:tableName
WHERE $script:column1 = '$script:newestRow';`n"
                ) -Scope script
                Set-Variable -Name action -Value 1 -Scope script
                filler

                #part 2: Update new row (usually incorrec info) to the correct info
                Set-Variable -Name comment -Value "--UPDATE OLD ROW TO CORRECT INFO
--CORRECT SSN: $script:correctSSN
--CORRECT AGENT ID: $script:correctAgentID
--CORRECT FILE NUMBER: $script:newFileNumber" -Scope script
                Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column2, $script:column3
FROM $script:tableName
WHERE $script:column1 IN ('$script:incorrectSSN','$script:correctSSN');`n") -Scope script
                Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
,$script:column2 = '$script:correctAgentID'
,$script:column3 = '$script:newFileNumber'
WHERE $script:column1 = '$script:oldestRow';`n") -Scope script
                Set-Variable -Name action -Value 2 -Scope script
                filler

                    #New agent ID has recruits
                    if($script:hasRecruits -eq 'y'){
                        
                        Set-Variable -Name comment -Value "--UPDATE RECRUITER ID TO CORRECT AGENT ID" -Scope script
                        Set-Variable -Name selectStatement -Value (
"SELECT $script:column2 AS ""RECRUIT"", $script:column8
FROM $script:tableName
WHERE $script:column8 IN ('$script:incorrectAgentID','$script:correctAgentID' );`n"
                        ) -Scope script
                        Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column8 = '$script:correctAgentID'
WHERE $script:column8 = '$script:incorrectAgentID';`n"
                        ) -Scope script
                        Set-Variable -Name action -Value 2 -Scope script
                        filler

                    }#end if statement

                if($script:auto -eq 'n'){ssnCorrectionsApp102}#end if statement
                }#end if/else statement

            }#end option 4

        #RECRUIT_PRODUCT
        #SOC_SEC_NUM, AGENT_ID - SHOULD MATCH OTHER TABLES WITH CORRECT INFO
        #IF NEW ROW WITH INCORRECT SSN/AGENT ID HAS NO VALUES THEN DELETE
        #IF NEW SSN, DELETE NEW ROW AND UPDATE OLD ROW SSN
        5 {
                Set-Variable -Name tableName -Value $recruit_Product -Scope script

                if($script:bogusSSNFlag -eq 'y' -or $script:newSSN -eq 'y'){

                    Set-Variable -Name comment -Value "--RECRUIT PRODUCT" -Scope script
                    Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column2
FROM $script:tableName
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script
                    if($script:newSSN){
                    Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
WHERE $script:column1 = '$script:incorrectSSN';`n") -Scope script
                    }
                    else{
                    Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:bogusSSN'
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script
                    }#end if/else statement
                    Set-Variable -Name action -Value 2 -Scope script
                    filler

                }else{

                $message = 
                "`nRECRUIT PRODUCT NOTE:`nOnly one row allowed. 
If new row with incorrect info has no values, delete it."
                
                Write-Host $message -ForegroundColor Yellow
                #determine which row is correct, the new one or old one
                Set-Variable -Name prompt -Value "RECRUIT PRODUCT`nDoes new row have values" -Scope script
                yesNoQuestion
                #if new row has values, delete old row and update new one
                Set-Variable -Name deleteRow -Value $script:selection -Scope script

                #new row has no values -- delete new row
                #delete incorrect info if it has no values
                    if($script:deleteRow -eq 'n'){
                          
                          Set-Variable -Name comment -Value "--REMOVE NEW ROW IF IT HAS NO VALUES
--INCORRECT SSN: $script:incorrectSSN" -Scope script
                          Set-Variable -Name target1 -Value $script:newestRow -Scope script
                          Set-Variable -Name target2 -Value $script:oldestRow -Scope script

                    }
                    else{

                        Set-Variable -Name comment -Value "--REMOVE OLD ROW" -Scope script
                        Set-Variable -Name target1 -Value $script:oldestRow -Scope script
                        Set-Variable -Name target2 -Value $script:newestRow -Scope script

                        Set-Variable -Name prompt -Value "RECRUIT PRODUCT`nDoes new row need to be update?" -Scope script
                        yesNoQuestion
                       #if new row has values, delete old row and update new one
                       $update = $script:selection

                    }#end if/else statement
                    
                    #part 1 delete incorrect row
                    Set-Variable -Name selectStatement -Value (
"SELECT *
FROM $script:tableName
WHERE $script:column1 = '$script:target1';`n"
                            ) -Scope script
                    Set-Variable deleteStatement -Value (
"DELETE FROM $script:tableName
WHERE $script:column1 ='$script:target1';`n"
                            ) -Scope script
                    Set-Variable -Name action -Value 1 -Scope script
                    filler
                    Clear-Variable -Name deleteRow -Scope script

                    #update new row, if it has values or if new agent id case
                    if(($script:newInfo -eq 'y')-or($update -eq 'y')){
                            #part 2: update
                            Set-Variable -Name comment -Value "--UPDATE ROW TO  CORRECT INFO
--CORRECT SSN: $script:correctSSN
--AGENTID: $script:correctAgentID" -Scope script
                            Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column2
FROM $script:tableName
WHERE $script:column1 IN ('$script:incorrectSSN', '$script:correctSSN');`n") -Scope script
                            Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
,$script:column2 = '$script:correctAgentID'
WHERE $script:column1 ='$script:target2';`n" ) -Scope script
                            Set-Variable -Name action -Value 2 -Scope script
                            filler
                        }#end if statement

                    if($script:auto -eq 'n'){ssnCorrectionsApp102}#end if statement

                    }#end if/else statement

           }#end option 6

        #STATE_LIC_ADDRESS
        #IF ADDRESS IS DIFFERENT, UPDATE ROW TO CORRECT INFO (WILL HAVE TO UPDATE ADDRESS_SEQUENCE)
        #IF ADDRESS IS THE SAME ON BOTH ROWS, DELETE ROW WITH INCORRECT SSN/CLIENT ID
        #CAN HAVE MULTIPLE ROWS
        6 {

                Set-Variable -Name tableName -Value $state_Lic_Address -Scope script

                if($script:bogusSSNFlag -eq 'y' -or $script:newSSN -eq 'y'){

                    Set-Variable -Name comment -Value "--STATE LIC ADDRESS" -Scope script
                    Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column4
FROM $script:tableName
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script
                    if($script:newSSN -eq 'y'){
                    Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
WHERE $script:column1 = '$script:incorrectSSN';`n") -Scope script
                    }
                    else{
                    Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:bogusSSN'
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script
                    }#end if/else statement
                    Set-Variable -Name action -Value 2 -Scope script
                    filler

                }
                else{
                #part 1: ask user if addresses are the same or different
                $message = 
                "`nSTATE LIC ADDRESS NOTE:
If address is different, update row to correct information.`nIf address is the same on both rows, delete the row with incorrect information"
                Write-Host $message -ForegroundColor Yellow
                Set-Variable -Name prompt -Value "STATE LIC ADDRESS`nAre the addresses the same" -Scope script
                yesNoQuestion
                Set-Variable -Name deleteRow -Value $script:selection -Scope script

                    #if address are the same: delete row with incorrect info
                    if($script:deleteRow -eq 'y'){ 
                            Set-Variable -Name comment -Value "--REMOVE NEW ROW" -Scope script
                            Set-Variable -Name selectStatement -Value (
                            "SELECT *`nFROM $script:tableName`nWHERE $script:column1 = '$script:incorrectSSN';`n"
                            ) -Scope script
                            Set-Variable deleteStatement -Value (
                            "DELETE FROM $script:tableName`nWHERE $script:column1 = '$script:incorrectSSN';`n"
                            ) -Scope script
                            Set-Variable -Name action -Value 1 -Scope script
                            filler
                            Clear-Variable -Name deleteRow -Scope script
                            if($script:auto -eq 'n'){ssnCorrectionsApp102}#end if statement
                        }
                    #if addresses are different, update row to correct info and change the address sequence (higher number is current address)
                    else{

                            #if this option is selected, get sequence number
                            #part 1: ask user if addresses are the same or different
                            Set-Variable -Name prompt -Value "Address Sequence Number?" -Scope script
                            confirmUserInput
                            $sequence = $script:userInput

                            Set-Variable -Name comment -Value "--UPDATE ROW TO CORRECT INFO" -Scope script
                            Set-Variable -Name selectStatement -Value (
                            "SELECT *`nFROM $script:tableName`nWHERE $script:column1 IN ('$script:incorrectSSN', '$script:correctSSN');`n"
                            ) -Scope script
                            Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
,$script:column4 = '$script:correctClientID'
,$script:column5 = '$sequence'
WHERE $script:column1 ='$script:incorrectSSN';`n"
                            ) -Scope script
                            Set-Variable -Name action -Value 2 -Scope script
                            filler
                          
                            }#end if/esle statement

               }#end outer if/else statement

                 if($script:auto -eq 'n'){ssnCorrectionsApp102}#end if statement
           }#end option 6

        #STATE_LIC_APP
        #CLIENT_ID  - SHOULD MATCH OTHER TABLES WITH CORRECT INFO
        #DO NOT DELETE - UPDATE ONLY
        #CAN HAVE MULTIPLE ROWS
        7 {
                Set-Variable -Name tableName -Value $state_Lic_App -Scope script

                if($script:ssnCorrections -eq 'y' -or $script:newInfo -eq 'y'){
                Set-Variable -Name comment -Value "--UPDATE CLIENT ID TO CORRECT INFO
--CORRECT CLIENT ID: $script:correctClientID" -Scope script
                Set-Variable -Name selectStatement -Value (
                "SELECT $script:column4`nFROM $script:tableName`nWHERE $script:column4 IN ($script:incorrectClientID,$script:correctClientID);`n"
                ) -Scope script
                Set-Variable -Name updateStatement -Value (
                "UPDATE $script:tableName`nSET $script:column4 = $script:correctClientID
WHERE $script:column4 = $script:incorrectClientID;`n"
                ) -Scope script
                Set-Variable -Name action -Value 2 -Scope script
                filler
                }#end if statement
                if($script:auto -eq 'n'){ssnCorrectionsApp102}#end if statement
           }#end option 7

        #STATE_LIC_CLIENT
        #SOC_SEC_NUM, CLIENT_ID, AGENT_ID - CURRENT ROW SHOULD HAVE CORRECT INFO
        #CURRENT ROW SHOULD HAVE CORRECT INFO
        #ONLY ONE ROW
        #DELETE ORIGINAL ROW AND UPDATE CURRENT ROW
        8 {
            
                Set-Variable -Name tableName -Value $state_Lic_Client -Scope script

                if($script:bogusSSNFlag -eq 'y' -or $script:newSSN -eq 'y'){

                    Set-Variable -Name comment -Value "--STATE LIC CLIENT" -Scope script
                    Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column4
,$script:column2
FROM $script:tableName
WHERE $script:column1 = '$script:correctSSN'
AND $script:column4 = $script:correctClientID;`n") -Scope script
                    if($script:newSSN -eq 'y'){
                    Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
WHERE $script:column1 = '$script:incorrectSSN'
AND $script:column4 = $script:correctClientID;`n") -Scope script
                    }
                    else{
                    Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:bogusSSN'
WHERE $script:column1 = '$script:correctSSN'
AND $script:column4 = $script:correctClientID;`n") -Scope script
                    }#end if/else statement
                    Set-Variable -Name action -Value 2 -Scope script
                    filler

                }
                else{
                $message = 
                "`nSTATE LIC CLIENT NOTE:`nIf more than one row, delete original row and update new row with correct information
If only one row, update to correct information"
                
                Write-Host $message -ForegroundColor Yellow
                Set-Variable -Name prompt -Value "STATE LIC CLIENT`nMore than one row" -Scope script
                yesNoQuestion

                    if($script:selection -eq 'y'){
                            #part 1: delete original row (usually correct info)
                            Set-Variable -Name comment -Value "--REMOVE ORIGINAL ROW" -Scope script
                            Set-Variable -Name selectStatement -Value (
                            "SELECT *`nFROM $script:tableName`nWHERE $script:column1 = '$script:oldestRow';`n"
                            ) -Scope script
                            Set-Variable deleteStatement -Value (
                            "DELETE FROM $script:tableName`nWHERE $script:column1 ='$script:oldestRow';`n"
                            ) -Scope script
                            Set-Variable -Name action -Value 1 -Scope script
                            filler
                         }#end if statment
      
                        #part 2: Update new row (usually incorrec info) to the correct info
                        Set-Variable -Name comment -Value ("--UPDATE CURRENT ROW TO RIGHT INFO
--CORRECT SSN: $script:correctSSN 
--CORRECT AGENTID: $script:correctAgentID 
--CORRECT CLIENT ID: $script:correctClientID" 
                        )-Scope script
                        Set-Variable -Name selectStatement -Value (
                        "SELECT $script:column1, $script:column4, $script:column2`nFROM $script:tableName
WHERE $script:column1 IN ('$script:incorrectSSN','$script:correctSSN');`n"
                        ) -Scope script
                        Set-Variable -Name updateStatement -Value (
                        "UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'`n,$script:column4 = $script:correctClientID`n,$script:column2 = '$script:correctAgentID'
WHERE $script:column1 = '$script:newestRow';`n"
                        ) -Scope script
                        Set-Variable -Name action -Value 2 -Scope script
                        filler

                    #New agent ID has recruits
                    if($script:hasRecruits -eq 'y'){
                        
                        Set-Variable -Name comment -Value "--UPDATE RECRUITER TO CORRECT AGENT ID" -Scope script
                        Set-Variable -Name selectStatement -Value (
"SELECT $script:column2 AS ""RECRUIT"", $script:column6
FROM $script:tableName
WHERE $script:column6 IN ('$script:incorrectAgentID', '$script:correctAgentID' );`n"
                        ) -Scope script
                        Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column6 = '$script:correctAgentID'
WHERE $script:column6 = '$script:incorrectAgentID';`n"
                        ) -Scope script
                        Set-Variable -Name action -Value 2 -Scope script
                        filler
                        }#end if statement
               }#end if/else statement

                if($script:auto -eq 'n'){ssnCorrectionsApp102}#end if statement
           }#end option 9

        #STATE_LIC_DEF_RESP
        #CLIENT_ID - UPDATE CLIENT ID TO CORRECT INFO
        #DO NOT DELETE - UPDATE ONLY
        #HAS MULTIPLE ROWS
        #DELETE NEW SRR, CRIMINAL, APPR FIRST
        9 {

               Set-Variable -Name tableName -Value $state_Lic_Def_Resp -Scope script

               if($script:ssnCorrections -eq 'y' -or $script:newInfo -eq 'y'){

                #if new row includes srr_form, criminal, or app first required forms it needs to be deleted first
                $message = 
                "`nSTATE LIC DEF RESP NOTE: If original row contains any of the following forms, 
they first need to be deleted as there cannot be duplicates of them."
                Write-Host $message -ForegroundColor Yellow

                Set-Variable -Name prompt -Value "Delete duplicate Forms" -Scope script
                yesNoQuestion
                if($script:selection -eq 'y')
                {defRespOptionals}#end if statement

                Set-Variable -Name comment -Value "--UPDATE CLIENT ID TO CORRECT INFO" -Scope script
                Set-Variable -Name selectStatement -Value (
                "SELECT COUNT($script:column4)`nFROM $script:tableName`nWHERE $script:column4 = $script:incorrectClientID;`n"
                ) -Scope script
                Set-Variable -Name updateStatement -Value (
                "UPDATE $script:tableName`nSET $script:column4 = $script:correctClientID
WHERE $script:column4 = $script:incorrectClientID;`n"
                ) -Scope script
                Set-Variable -Name action -Value 2 -Scope script
                filler
                }#end if statement
               if($script:auto -eq 'n'){ssnCorrectionsApp102}#end if statement   
            }#end option 10

        #STATE_LIC_DEMOGRAPH
        #CLIENT_ID  - SHOULD MATCH OTHER TABLES WITH CORRECT INFO
        #IF NEW ROW WITH INCORRECT CLIENT ID HAS NO VALUES THEN DELETE
        #IF NEW ROW HAS VALUES, DELETE OLD ROW AND UPDATE NEW ROW WITH CORRECT CLIENT ID
        #ONLY 1 ROW -- KEEP THE LATEST ONE
        10 {

                if($script:ssnCorrections -eq 'y' -or $script:newInfo -eq 'y'){

                #part 1: check if new row has values
                $message =
                "`nSTATE LIC DEMOGRAPH NOTE:
If new row has no values, delete it. 
If new row has values, delete original row and update new row with the correct information"
                Set-Variable -Name tableName -Value $state_Lic_Demograph -Scope script
                Write-Host $message -ForegroundColor Yellow
                Set-Variable -Name prompt -Value "DEMOGRAPH`nDoes new row have values" -Scope script
                yesNoQuestion
                Set-Variable -Name deleteRow -Value $script:selection -Scope script

                if($script:selection -eq 'n'){

                    #case 1: New row has no values -- delete new row, leave old row alone
                    Set-Variable -Name comment -Value "--REMOVE NEW ROW IF IT HAS NO VALUES" -Scope script
                    Set-Variable -Name target1 -Value $script:incorrectClientID -Scope script
                    Set-Variable -Name target2 -Value $script:correcClientID -Scope script

                }
            else{
                
                   #case 1: New row has no values -- delete old row, and update new row
                    Set-Variable -Name comment -Value "--REMOVE OLD ROW" -Scope script
                    Set-Variable -Name target1 -Value $script:correctClientID -Scope script
                    Set-Variable -Name target2 -Value $script:incorrectClientID -Scope script
                
                }#end if/else statement

                
                #part 1: delete old row (usually correct info)
                        
                        Set-Variable -Name selectStatement -Value (
                        "SELECT *`nFROM $script:tableName`nWHERE $script:column4 = $script:target1;`n"
                        ) -Scope script
                        Set-Variable deleteStatement -Value (
                        "DELETE FROM $script:tableName`nWHERE $script:column4 = $script:target1;`n"
                        ) -Scope script
                        Set-Variable -Name action -Value 1 -Scope script
                        filler
                      
                #case2: New row has values --delete old row and update new row
                     if($script:deleteRow -eq 'y'){
                         Set-Variable -Name comment -Value "--UPDATE NEW ROW WITH CORRECT CLIENT ID
--CORRECT CLIENT ID: $script:correctClientID" -Scope script   
                         Set-Variable -Name selectStatement -Value (
                         "SELECT $script:column4`nFROM $script:tableName
WHERE $script:column4 IN ($script:incorrectClientID, $script:correctClientID);`n"
                         ) -Scope script
                         Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column4 = '$script:correctClientID'
WHERE $script:column4 = $script:incorrectClientID;`n"
                         ) -Scope script
                         Set-Variable -Name action -Value 2 -Scope script
                         Clear-Variable -Name deleteRow -Scope script
                         filler
                     }#end if function
                     }#end outer if statement

                if($script:auto -eq 'n'){ssnCorrectionsApp102}#end if statement

           }#end option 11

        #STATE_LIC_MONY_ACT
        #SOC_SEC_NUM - SHOULD MATCH OTHER TABLES WITH CORRECT INFO
        #DO NOT DELETE - UPDATE ONLY
        #HAS MULTIPLE ROWS
        #ONLY SHOW ROWS CHANGING. OTHERWISE TOO MANY ROWS
        11 {
                Set-Variable -Name tableName -Value $state_Lic_Mony_Act -Scope script

                if($script:bogusSSNFlag -eq 'y' -or $script:newSSN -eq 'y'){

                    Set-Variable -Name comment -Value "--STATE LIC MONY ACT" -Scope script
                    Set-Variable -Name selectStatement -Value (
"SELECT $script:column3, $script:column1
FROM $script:tableName
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script
                    if($script:newSSN -eq 'y'){
                    Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
WHERE $script:column1 = '$script:incorrectSSN';`n") -Scope script
                    }
                    else{
                    Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:bogusSSN'
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script
                    }#end if/else statement
                    Set-Variable -Name action -Value 2 -Scope script
                    filler

                }else{
                 Set-Variable -Name comment -Value "--UPDATE SSN TO CORRECT INFO
--CORRECT SSN: $script:correctSSN" -Scope script
                Set-Variable -Name selectStatement -Value (
                "SELECT $script:column1`nFROM $script:tableName`nWHERE $script:column1 = '$script:incorrectSSN';`n"
                ) -Scope script
                Set-Variable -Name updateStatement -Value (
                "UPDATE $script:tableName`nSET $script:column1 = '$script:correctSSN'`nWHERE $script:column1 = '$script:incorrectSSN';`n"
                ) -Scope script
                Set-Variable -Name action -Value 2 -Scope script
                filler
                }#end outer if/else statement
                if($script:auto -eq 'n'){ssnCorrectionsApp102}#end if statement   
            }#end option 12

        #STATE_LIC_REC_NOTE
        #SOC_SEC_NUM, AGENT_ID - SHOULD MATCH OTHER TABLES WITH CORRECT INFO
        #DO NOT DELETE - UPDATE ONLY
        #HAS MULTIPLE ROWS
        12 {
                 #too many rows, select only the ones being changed
                Set-Variable -Name tableName -Value $state_Lic_Rec_Note -Scope script
                if($script:bogusSSNFlag -eq 'y' -or $script:newSSN -eq 'y'){

                    Set-Variable -Name comment -Value "--STATE LIC REC NOTE" -Scope script
                    Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column2
FROM $script:tableName
WHERE $script:column1 = '$script:correctSSN'
AND $script:column2 = '$script:correctAgentID';`n") -Scope script
                    if($script:newSSN -eq 'y'){
                    Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
WHERE $script:column1 = '$script:incorrectSSN'
AND $script:column2 = '$script:correctAgentID';`n") -Scope script}
                    else{
                    Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:bogusSSN'
WHERE $script:column1 = '$script:correctSSN'
AND $script:column2 = '$script:correctAgentID';`n") -Scope script
                    }#end if/else statement
                    Set-Variable -Name action -Value 2 -Scope script
                    filler

                }
                else{

                 Set-Variable -Name comment -Value "--UPDATE SSN AND AGENT ID
--CORRECT SSN: $script:correctSSN
--CORRECT AGENT ID: $script:correctAgentID" -Scope script
                Set-Variable -Name selectStatement -Value (
                "SELECT $script:column1, $script:column2`nFROM $script:tableName
WHERE $script:column1 = '$script:incorrectSSN';`n"
                ) -Scope script
                Set-Variable -Name updateStatement -Value (
                "UPDATE $script:tableName`nSET $script:column1 = '$script:correctSSN'`n,$script:column2 = '$script:correctAgentID'
WHERE $script:column1 = '$script:incorrectSSN';`n"
                ) -Scope script
                Set-Variable -Name action -Value 2 -Scope script
                filler
                }#end outer if/else statement
                if($script:auto -eq 'n'){ssnCorrectionsApp102}#end if statement   
            }#end option 13

        #STATE_LIC_TEMP
        #AGENT_ID - SHOULD MATCH OTHER TABLES WITH CORRECT INFO
        #DO NOT DELETE - UPDATE ONLY
        #HAS MULTIPLE ROWS
        13 {
                Set-Variable -Name tableName -Value $state_Lic_Temp -Scope script

                if($script:ssnCorrections -eq 'y' -or $script:newInfo -eq 'y'){
                 Set-Variable -Name comment -Value "--UPDATE AGENT ID TO CORRECT INFO
--CORRECT AGENT ID: $script:correctAgentID" -Scope script
                Set-Variable -Name selectStatement -Value (
                "SELECT $script:column2`nFROM $script:tableName`nWHERE $script:column2 IN ('$script:incorrectAgentID','$script:correctAgentID');`n"
                ) -Scope script
                Set-Variable -Name updateStatement -Value (
                "UPDATE $script:tableName`nSET $script:column2 = '$script:correctAgentID'`nWHERE $script:column2 = '$script:incorrectAgentID';`n"
                ) -Scope script
                Set-Variable -Name action -Value 2 -Scope script
                filler

                    #New agent ID has recruits
                    if($script:hasRecruits -eq 'y'){
                        
                        Set-Variable -Name comment -Value "--UPDATE TRAINER ID TO CORRECT AGENT ID" -Scope script
                        Set-Variable -Name selectStatement -Value (
                        "SELECT $script:column2 AS ""RECRUIT"", $script:column10
FROM $script:tableName`nWHERE $script:column10 = '$script:incorrectAgentID';`n"
                        ) -Scope script
                        Set-Variable -Name updateStatement -Value (
                        "UPDATE $script:tableName`nSET $script:column10 = '$script:correctAgentID'
WHERE $script:column10 = '$script:incorrectAgentID';`n"
                        ) -Scope script
                        Set-Variable -Name action -Value 2 -Scope script
                        filler
                        }#end if statement
                        }#end outer if/else statement

                if($script:auto -eq 'n'){ssnCorrectionsApp102}#end if statement 
            }#end option 14

        #OPTIONAL TABLES
        14 {app102Optional}#end option 15

        #EXIT
        15 { 
                addSpace  
                if($script:auto -eq 'n'){ssnCorrections}
             }#end option 15
    
    } #end switch case

}#end function

#Def resp
function defRespOptionals{

    Set-Variable -Name possibleValues -Value (@(1..5)) -Scope script
    Set-Variable -Name prompt -Value "Remove duplicate rows" -Scope script
    Write-Host $duplicateForms
    getUserInput

    switch($script:userInput)
    {
        1 {$forms = "'CONFAPPR', 'CONFLICT'"} #end option 1
        2 {$forms = "'PFSFEE'"}#end option 2
        3 {$forms = "'SRRFORM'"}#end option 3
        4 {$forms = "'CONFAPPR', 'CONFLICT','PFSFEE','SRRFORM'"}#end option 4
        5 {}#end option 5
    }#end switch statement

                Set-Variable -Name comment -Value "--REMOVE DUPLICATE FORMS" -Scope script
                Set-Variable -Name selectStatement -Value (
"SELECT *
FROM $script:tableName
WHERE $script:column4 = $script:incorrectClientID
AND $script:column11 IN ($forms);`n"
                ) -Scope script
                Set-Variable -Name updateStatement -Value (
"DELETE FROM $script:tableName
WHERE $script:column4 = $script:incorrectClientID
AND $script:column11 IN ($forms);`n"
                ) -Scope script
                Set-Variable -Name action -Value 2 -Scope script
                filler

}#end fucntion

#APPCODE 102 OPTIONAL TABLES
function app102Optional{

        #banner
             Write-Host "`nApp 102 Optional Tables Menu" -ForegroundColor Cyan

            #STEP 1: show menu
            Write-Host $app102OptionalTables 

            Set-Variable -Name possibleValues -Value (@(1..9)) -Scope script

             userSelection

              switch ($script:selection) 
              {

                    #ACF_BACKGROUND_CHK
                    #CLIENT_ID SHOULD MATCH ALL OTHER TABLES WITH CORRECT INFO
                    #DO NOT DELETE - UPDATE ONLY
                    1 {
                            #NEEDS WORK--INCOMPLETE
                             Set-Variable -Name tableName -Value $acf_Background_Chk -Scope script

                            Set-Variable -Name comment -Value "--UPDATE CLIENT ID TO MATCH CORRECT INFO" -Scope script
                            Set-Variable -Name selectStatement -Value (
"SELECT $script:column4
FROM $script:tableName
WHERE $script:column4 IN ($script:incorrectClientID,$script:correctClientID);`n"
                            ) -Scope script
                            Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column4 = $script:correctClientID
WHERE $script:column4 = $script:incorrectClientID;`n"
                            ) -Scope script
                            Set-Variable -Name action -Value 2 -Scope script
                            filler
                            app102Optional
 
                      }#end option 1

                    #CLIENT_COURSE_HIST
                    #CLIENT_ID SHOULD MATCH ALL OTHER TABLES WITH CORRECT INFO
                    #DO NOT DELETE - UPDATE ONLY
                    #CAN HAVE MULTIPLE ROWS-THIS TABLE IS OLD AND RARELY UPDATED
                   2 {
                
                        #update Client ID
                        Set-Variable -Name tableName -Value $acf_Course_Hist -Scope script
                        Set-Variable -Name comment -Value "--UPDATE CLIENT ID TO MATCH CORRECT INFO --DONT DELETE" -Scope script
                        Set-Variable -Name selectStatement -Value (
                "SELECT $script:column4`nFROM $script:tableName`nWHERE $script:column4 = $script:incorrectClientID;`n"
                ) -Scope script
                        Set-Variable -Name updateStatement -Value (
                "UPDATE $script:tableName`nSET $script:column4 = '$script:correctClientID'`nWHERE $script:column4 = $script:incorrectClientID;`n"
                ) -Scope script
                        Set-Variable -Name action -Value 2 -Scope script
                        filler
                        app102Optional

                     }#end option 2

                    #IBA_TEMP_AGENT_ID
                    #THIS TABLE DROPS OFF AFTER 30 DAYS - DELETE ROW WITH INCORRECT INFO
                    #ONLY ONE ROW
                    3 {
                            Set-Variable -Name tableName -Value $iba_Temp_Agent_Id -Scope script

                            if($script:bogusSSNFlag -eq 'y'){

                            Set-Variable -Name comment -Value "--IBA TEMP AGENT ID" -Scope script
                            Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column9
FROM $script:tableName
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script
                            Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:bogusSSN'
WHERE $script:column1 ='$script:incorrectSSN';`n" ) -Scope script
                            Set-Variable -Name action -Value 1 -Scope script
                            filler

                            }else{

                            Set-Variable -Name comment -Value "--REMOVE ROW WITH INCORRECT SSN" -Scope script
                            Set-Variable -Name selectStatement -Value (
"SELECT *
FROM $script:tableName
WHERE $script:column1 = '$script:incorrectSSN';`n") -Scope script
                            Set-Variable deleteStatement -Value (
"DELETE FROM $script:tableName
WHERE $script:column1 ='$script:incorrectSSN';`n" ) -Scope script
                            Set-Variable -Name action -Value 1 -Scope script
                            filler

                    #New agent ID has recruits
                    if($script:hasRecruits -eq 'y'){
                        
                        Set-Variable -Name comment -Value "--REMOVE ROW WITH INCORRECT RECRUITER AGENT ID" -Scope script
                        Set-Variable -Name selectStatement -Value (
"SELECT *
FROM $script:tableName
WHERE $script:column9 = '$script:incorrectAgentID';`n"
                        ) -Scope script
                        Set-Variable -Name updateStatement -Value (
"DELETE FROM $script:tableName
WHERE $script:column9 = '$script:incorrectAgentID';`n") -Scope script
                        Set-Variable -Name action -Value 2 -Scope script
                        filler

                    }#end if statement

                    }#end if/else statement

                            app102Optional

                        }#end option 3

                    #STATE_LIC_CHKLST
                    #SOC_SEC_NUM, CLIENT_ID - SHOULD MATCH OTHER TABLES WITH CORRECT INFO
                    #DO NOT DELETE - UPDATE ONLY (THIS TABLE IS OLDER AND DOES NOT SHOW UP OFTEN
                    #HAS MULTIPLE ROWS
                    4 {

                        #update SSN and client ID
                        Set-Variable -Name tableName -Value $state_Lic_Chklst -Scope script
                        Set-Variable -Name comment -Value "--UPDATE SSN AND CLIENT ID TO CORRECT INFO--DO NOT DELETE" -Scope script
                        Set-Variable -Name selectStatement -Value (
                "SELECT $script:column1, $script:column4`nFROM $script:tableName
WHERE $script:column1 = '$script:incorrectSSN';`n"
                ) -Scope script
                        Set-Variable -Name updateStatement -Value (
                "UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'`n, $script:column4 = $script:correctClientID
WHERE $script:column1 = '$script:incorrectSSN';`n"
                ) -Scope script
                        Set-Variable -Name action -Value 2 -Scope script
                        filler
                       app102Optional

                     }#end option 4

                    #STATE_LIC_REFUNDS
                    #SOC_SEC_NUM - SHOULD MATCH OTHER TABLES WITH CORRECT INFO
                    #DO NOT DELETE - UPDATE ONLY
                    #ONLY 1 ROW
                    5 {
                            Set-Variable -Name tableName -Value $state_Lic_Refunds -Scope script

                            if($script:bogusSSNFlag -eq 'y' -or $script:newSSN -eq 'y'){
                                
                                Set-Variable -Name comment -Value "--STATE LIC REFUND" -Scope script
                                Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column15
FROM $script:tableName
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script
                                if($script:newSSN -eq 'y'){
                                Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
WHERE $script:column1 = '$script:incorrectSSN';`n") -Scope script
                                }
                                else{
                                Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:bogusSSN'
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script}#end if/else statement
                                Set-Variable -Name action -Value 2 -Scope script
                                filler

                            }
                            else{
                            Set-Variable -Name comment -Value "--UPDATE SSN TO CORRECT INFO" -Scope script
                            Set-Variable -Name selectStatement -Value (
"SELECT *
FROM $script:tableName
WHERE $script:column1 = '$script:incorrectSSN';`n") -Scope script
                            Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
WHERE $script:column1 = '$script:incorrectSSN';`n") -Scope script
                            Set-Variable -Name action -Value 2 -Scope script
                            filler
                            }#end outer if/else statement
                            app102Optional
                        }#end option 5

                    #STATE_LIC_RET_ITEM
                    #SOC_SEC_NUM - SHOULD MATCH OTHER TABLES WITH CORRECT INFO
                    #DO NOT DELETE - UPDATE ONLY
                    6 {

                            Set-Variable -Name tableName -Value $state_Lic_Ret_Item -Scope script

                             if($script:bogusSSNFlag -eq 'y'){
                                
                                    Set-Variable -Name comment -Value "--STATE LIC RET ITEM" -Scope script
                                    Set-Variable -Name selectStatement -Value (
"SELECT $script:column1
FROM $script:tableName
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script
                                    Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:bogusSSN'
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script
                                    Set-Variable -Name action -Value 2 -Scope script
                                    filler
                             }
                             else{
                                    Set-Variable -Name comment -Value "--UPDATE SSN TO CORRECT INFO -- DO NOT DELETE" -Scope script
                                    Set-Variable -Name selectStatement -Value (
                "SELECT *`nFROM $script:tableName`nWHERE $script:column1 = '$script:incorrectSSN';`n"
                ) -Scope script
                                    Set-Variable -Name updateStatement -Value (
                "UPDATE $script:tableName`nSET $script:column1 = '$script:correctSSN'`nWHERE $script:column1 = '$script:incorrectSSN';`n"
                ) -Scope script
                                    Set-Variable -Name action -Value 2 -Scope script
                                    filler
                                    app102Optional 
                }#end if/else statement

            }#end option 6

                    #STATE_LIC_SPOUSE
                    #SOC_SEC_NUM, CLIENT_ID - SHOULD MATCH OTHER TABLES WITH CORRECT INFO
                    #IF TWO ROWS WITH IDENTICAL VALUES, DELETE ROW WITH INCORRECT SSN/CLIENT ID
                    #ONLY 1 ROW
                    7 {

                #check if rows are identical or not
                Set-Variable -Name tableName -Value $state_Lic_Spouse -Scope script

                if($script:bogusSSNFlag -eq 'y' -or $script:newSSN -eq 'y'){

                    Set-Variable -Name comment -Value "--STATE LIC SPOUSE" -Scope script
                    Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column4
FROM $script:tableName
WHERE $script:column1 = '$script:correctSSN'
AND $script:column4 = '$script:correctClientID';`n") -Scope script
                    Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:bogusSSN'
WHERE $script:column1 = '$script:correctSSN'
AND $script:column4 = $script:correctClientID;`n") -Scope script
                    Set-Variable -Name action -Value 2 -Scope script
                    filler

                }else{
                Set-Variable -Name prompt -Value "SPOUSE`nMore than one row?" -Scope script
                yesNoQuestion
                Set-Variable -Name deleteRow -Value $script:selection -Scope script



                    #delete
                    if($script:deleteRow -eq 'y'){
                            #part 1 --delete
                            Set-Variable -Name comment -Value "--REMOVE OLD ROW" -Scope script
                            Set-Variable -Name selectStatement -Value (
                            "SELECT *`nFROM $script:tableName`nWHERE $script:column1 = '$script:incorrectSSN';`n"
                            ) -Scope script
                            Set-Variable deleteStatement -Value (
                            "DELETE FROM $script:tableName`nWHERE $script:column1 ='$script:incorrectSSN';`n"
                            ) -Scope script
                            Set-Variable -Name action -Value 1 -Scope script
                            filler
                            }#end if statement

                    Set-Variable -Name prompt -Value "SPOUSE`nDoes the row need to be updated?" -Scope script
                    yesNoQuestion
                    $update = $script:selection

                    #update
                    if($update -eq 'y'){
                         Set-Variable -Name comment -Value "--UPDATE NEW ROW TO CORRECT SSN AND CLIENT ID" -Scope script
                            Set-Variable -Name selectStatement -Value (
"SELECT *
FROM $script:tableName
WHERE $script:column1 IN ('$script:incorrectSSN','$script:correctSSN');`n"
                            ) -Scope script
                            Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
,$script:column4 = $script:correctClientID
WHERE $script:column1 ='$script:incorrectSSN';`n") -Scope script
                            Set-Variable -Name action -Value 2 -Scope script
                            Clear-Variable -Name deleteRow -Scope script
                            filler
                    }#end if statement

                   
                    if($script:auto -eq 'n'){ssnCorrectionsApp102}#end if statement

                    }#end if statement

                   app102Optional

                }#end option 7
        
                    #STATE_LIC_QUESTION
                    #SOC_SEC_NUM, CLIENT_ID - SHOULD MATCH OTHER TABLES WITH CORRECT INFO
                    #IF ROWS ARE ON THIS TABLE WITH CORRECT AND INCORRECT INFO, YOU CANNOT UPDATE AS YOU WILL GET A DUPLICATE VALUES ERROR.   
                    #CONFIRM THAT BOTH SETS OF QUESTIONS HAVE IDENTICAL ANSWERS AND THEN DELETE THE INCORRECT SOCIAL/CLIENTID
                    #HAS MULTIPLE ROWS
                    8 {
                #check if rows are identical or not
                Set-Variable -Name tableName -Value $state_Lic_Question -Scope script

                if($script:bogusSSNFlag -eq 'y'){

                    Set-Variable -Name comment -Value "STATE LIC QUESTION" -Scope script
                    Set-Variable -Name selectStatement -Value (
"SELECT *
FROM $script:tableName
WHERE $script:column1 = '$script:correctSSN'
AND $script:column4 = $script:correctClientID;`n") -Scope script
                    Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:bogusSSN'
WHERE $script:column1 = '$script:correctSSN'
AND $script:column4 = $script:correctClientID;`n") -Scope script
                    Set-Variable -Name action -Value 2 -Scope script
                    filler

                }else{

                Set-Variable -Name prompt -Value "STATE LIC QUESTION`nAre both set of questions identical" -Scope script
                yesNoQuestion
                Set-Variable -Name deleteRow -Value $script:selection -Scope script

               
                    if($script:deleteRow -eq 'y'){ 
                            Set-Variable -Name comment -Value "--REMOVE IDENTICAL ROW WITH INCORRECT INFO" -Scope script
                            Set-Variable -Name selectStatement -Value (
                            "SELECT *`nFROM $script:tableName`nWHERE $script:column1 = '$script:incorrectSSN';`n"
                            ) -Scope script
                            Set-Variable deleteStatement -Value (
                            "DELETE FROM $script:tableName`nWHERE $script:column1 ='$script:incorrectSSN';`n"
                            ) -Scope script
                            Set-Variable -Name action -Value 1 -Scope script
                            filler
                            if($script:auto -eq 'n'){ssnCorrectionsApp102}#end if statement
                        }#end if statement

                        #update
                            #part 2 -- update
                            Set-Variable -Name comment -Value "--UPDATE  TO CORRECT SSN AND CLIENT ID" -Scope script
                            Set-Variable -Name selectStatement -Value (
                            "SELECT *`nFROM $script:tableName`nWHERE $script:column1 IN ('$script:incorrectSSN', '$script:correctSSN');`n"
                            ) -Scope script
                            Set-Variable updateStatement -Value (
                            "UPDATE $script:tableName`nSET $script:column1 = '$script:correctSSN'`n,$script:column4 = $script:correctClientID
WHERE $script:column1 ='$script:incorrectSSN';`n"
                            ) -Scope script
                            Set-Variable -Name action -Value 2 -Scope script
                            Clear-Variable -Name deleteRow -Scope script
                            filler
                            }#end outer if/else statement
                app102Optional

             }#end option 8

                    #EXIT
                    9 { 
                            addSpace  
                            if($script:auto -eq 'n'){ssnCorrections}
                        }#end option 9
             }#end switch statement

}#end function

#APPCODE 201
function ssnCorrectionsApp201{

     #Step 2: add number of possible menu answers
     Set-Variable -Name possibleValues -Value (@(1..3)) -Scope script
     Set-Variable -Name column1 -Value "SOC_SEC_NUM" -Scope script
     Set-Variable -Name column2 -Value "AGENT_ID" -Scope script
     Set-Variable -Name column3 -Value "RECRUITER" -Scope script
     Set-Variable -Name column4 -Value "RECRUIT_NAME" -Scope script
     Set-Variable -Name column5 -Value "AGENCY_COMPANY_NUM" -Scope script

     #step 3: allow selection
     if($script:auto -ne 'y')
        {
            #banner
            Write-Host "`nApp 201 Tables Menu" -ForegroundColor Cyan

            #STEP 1: show menu
            Write-Host $app201Tables 

             userSelection

      }#end if function

     #step 5: switch statement
     switch ($script:selection) 

    {
        #AGENT_RECRUIT_TRX
        #SOC_SEC_NUM, AGENT_ID - UPDATE TO CORRECT VALUES
        #NEVER DELETE FROM THIS TABLE - UPDATE ONLY
        #HAS MULTIPLE ROWS
        1 {
                Set-Variable -Name tableName -Value $agent_Recruit_Trx -Scope script
                if($script:bogusSSNFlag -eq 'y' -or $script:newSSN -eq 'y'){

                     Set-Variable -Name comment -Value "--AGENT_RECRUIT_TRX" -Scope script
                    Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column2
,$script:column4
FROM $script:tableName
WHERE $script:column1 = '$script:correctSSN'
AND $script:column2 = '$script:correctAgentID';`n") -Scope script
                    if($script:newSSN -eq 'y'){
                    Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
WHERE $script:column1 = '$script:incorrectSSN'
AND $script:column2 = '$script:correctAgentID';`n") -Scope script
                    }
                    else{
                    Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:bogusSSN'
WHERE $script:column1 = '$script:correctSSN'
AND $script:column2 = '$script:correctAgentID';`n") -Scope script}#end if/else statement
                    Set-Variable -Name action -Value 2 -Scope script
                    filler

                }
                else{

                Set-Variable -Name comment -Value "--UPDATE SSN AND AGENT ID
--CORRECT SSN: $script:correctSSN
--CORRECT AGENT ID: $script:correctAgentID" -Scope script
                #show both correct/incorrect to make sure agent id is good as well
                Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column2, $script:column4
FROM $script:tableName
WHERE $script:column1 IN ('$script:incorrectSSN','$script:correctSSN');`n"
                ) -Scope script
                #update both correct and incorrect SSN should cover new SSN cases...no foreseen issues at the moment
                Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
,$script:column2 = '$script:correctAgentID'
WHERE $script:column1 IN ('$script:incorrectSSN','$script:correctSSN');`n"
                ) -Scope script
                Set-Variable -Name action -Value 2 -Scope script
                filler

                    #New agent ID has recruits
                    if($script:hasRecruits -eq 'y'){
                       
                        Set-Variable -Name comment -Value "--UPDATE RECRUITER TO CORRECT AGENT ID" -Scope script
                        Set-Variable -Name selectStatement -Value (
"SELECT $script:column4, $script:column2, $script:column3
FROM $script:tableName
WHERE $script:column3 = '$script:incorrectAgentID'
AND $script:column5 = '04';`n"
                        ) -Scope script
                        Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column3 = '$script:correctAgentID'
WHERE $script:column3 = '$script:incorrectAgentID'
AND $script:column5 = '04';`n"
                        ) -Scope script
                        Set-Variable -Name action -Value 2 -Scope script
                        filler

                    }#end if statement
                    }#end outer if/else statement

                if($script:auto -eq 'n'){ssnCorrectionsApp201}#end if statement
          }#end option 1

        #RECRUIT_MANUAL_TRX
        #SOC_SEC_NUM - UPDATE TO CORRECT VALUE
        #NEVER DELETE FROM THIS TABLE - UPDATE ONLY
        #USUALLY ONLY 1 ROW
        2 {app201Optional}#end option 2
        #RECRUIT_DATA
        #exit
        3 { 
                addSpace  
                if($script:auto -eq 'n'){ssnCorrections}

            }#end option 3
     
    } #end switch case

}#end function

#APPCODE 201 optional tables
function app201Optional{

    #RECRUIT_MANUAL_TRX
        #SOC_SEC_NUM - UPDATE TO CORRECT VALUE
        #NEVER DELETE FROM THIS TABLE - UPDATE ONLY
        #USUALLY ONLY 1 ROW
        
        Set-Variable -Name prompt -Value "Add optional Table RECRUIT_MANUAL_TRX" -Scope script
        yesNoQuestion

                if($script:selection -eq 'y')
                {
                Set-Variable -Name tableName -Value $recruit_Manual_Trx -Scope script

                Set-Variable -Name comment -Value "--UPDATE SSN TO CORRECT INFO -- DONT DELETE" -Scope script
                Set-Variable -Name selectStatement -Value (
"SELECT $script:column1
FROM $script:tableName
WHERE $script:column1 IN ('$script:incorrectSSN','$script:correctSSN');`n"
                ) -Scope script
                Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
WHERE $script:column1 = '$script:incorrectSSN';`n"
                ) -Scope script
                Set-Variable -Name action -Value 2 -Scope script
                filler
                if($script:auto -eq 'n'){ssnCorrectionsApp201}#end if statement
                }#end if statement

}#end function

#APPCODE 213
function ssnCorrectionsApp213{

     #Step 2: add number of possible menu answers
     Set-Variable -Name possibleValues -Value (@(1..6)) -Scope script
     Set-Variable -Name column1 -Value "SOC_SEC_NUM" -Scope script
     Set-Variable -Name column2 -Value "AGENT_ID" -Scope script
     Set-Variable -Name column3 -Value "RECRUITER_ID" -Scope script
     Set-Variable -Name column4 -Value "SSN" -Scope script
     Set-Variable -Name column5 -Value "CLIENT_ID" -Scope script
     Set-Variable -Name column6 -Value "FILE_NUMBER" -Scope script
     Set-Variable -Name column7 -Value "FIRST_NAME" -Scope script
     Set-Variable -Name column8 -Value "LAST_NAME" -Scope script
     Set-Variable -Name column9 -Value "FIRSTNAME" -Scope script
     Set-Variable -Name column10 -Value "LASTNAME" -Scope script

     #step 3: allow selection
     if($script:auto -ne 'y')
        {
            #banner
            Write-Host "`nApp 213 Tables Menu" -ForegroundColor Cyan

             #STEP 1: show menu
             Write-Host $app213Tables 

             userSelection

      }#end if function

     #step 5: switch statement
     switch ($script:selection) 

    {
        #PFA_RECRUIT_TRACK
        #SOC_SEC_NUM, AGENT_ID - Update to correct values
        #Usually only 1 row to update.  If 2 rows, update row with Pending file and delete other row
        1 {
                $message = "`nPFA RECRUIT TRACK NOTE:
Usually only one row. If two or more rows, update row with pending file and delete other rows"
                Set-Variable -Name tableName -Value $pfa_Recruit_Track -Scope script
                if($script:bogusSSNFlag -eq 'y' -or $script:newSSN -eq 'y'){

                    Set-Variable -Name comment -Value "--PFA RECRUIT TRACK" -Scope script
                    Set-Variable -Name selectStatement -Value (
"SELECT $script:column9, $script:column10, $script:column1
FROM $script:tableName
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script
                    if($script:newSSN -eq 'y'){
                    Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
WHERE $script:column1 = '$script:incorrectSSN';`n") -Scope script
                    }
                    else{
                    Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:bogusSSN'
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script}#end if/else statement
                    Set-Variable -Name action -Value 2 -Scope script
                    filler

                }
                else{
                Write-Host $message -ForegroundColor Yellow
                Set-Variable -Name prompt -Value "PFA RECRUIT TRACK`nMore than one row?" -Scope script
                yesNoQuestion
 
                if($script:selection -eq 'y'){
                    Set-Variable -Name target1 -Value $script:oldestRow -Scope script
                    Set-Variable -Name deleteRow -Value 'y' -Scope script
                }
                else
                {
                    Set-Variable -Name prompt -Value "PFA RECRUIT TRACK`nDoes row need to be corrected?" -Scope script
                    yesNoQuestion
                    if($script:selection -eq 'y'){
                        Set-Variable -Name target1 -Value $script:correctSSN -Scope script
                        Set-Variable -Name complete -Value 'n'
                    }#end if statement
                    
                }#end if/else statement

                #case 1: two rows, delete old row and update new one
                if($script:deleteRow -eq 'y'){
                   #part 1: delete row with old file number
                   Set-Variable -Name comment -Value "--REMOVE OLD ROW`n--UPDATE NEW ROW" -Scope script
                   Set-Variable -Name selectStatement -Value (
                   "SELECT *`nFROM $script:tableName`nWHERE $script:column1 = '$script:oldestRow';`n"
                   ) -Scope script
                   Set-Variable -Name deleteStatement -Value (
                   "DELETE FROM $script:tableName`nWHERE $script:column1 = '$script:oldestRow';`n"
                    ) -Scope script
                    Set-Variable -Name action -Value 1 -Scope script
                    Clear-Variable -Name deleteRow -Scope script
                    filler

                    Set-Variable -Name complete -Value 'n'
                    }#end if statement
                    

                if($complete -eq 'n'){

                    Set-Variable -Name comment -Value "--UPDATE ROW TO CORRECT INFO
--CORRECT SSN: $script:correctSSN
--CORRECT AGENT ID: $script:correctAgentID
--NEW FILE NUMBER: $script:newFileNumber" -Scope script
                    Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column2, $script:column6
FROM $script:tableName
WHERE $script:column1 IN ('$script:incorrectSSN', '$script:correctSSN');`n"
                                ) -Scope script
                    Set-Variable -Name updateStatement -Value (
                        "UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
,$script:column2 = '$script:correctAgentID'
,$script:column6 = '$script:newFileNumber'
WHERE $script:column1 = '$script:newestRow';`n"
                          ) -Scope script
                    Set-Variable -Name action -Value 2 -Scope script
                    Clear-Variable -Name complete 
                    filler

                }#end if statement
   
                #New agent ID has recruits
                if($script:hasRecruits -eq 'y'){
                        
                        Set-Variable -Name comment -Value "--UPDATE RECRUITER_ID TO CORRECT AGENT ID" -Scope script
                        Set-Variable -Name selectStatement -Value (
"SELECT $script:column2 AS ""RECRUIT"", $script:column3
FROM $script:tableName
WHERE $script:column3 IN ('$script:incorrectAgentID','$script:correctAgentID');`n"
                        ) -Scope script
                        Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column3 = '$script:correctAgentID'
WHERE $script:column3 = '$script:incorrectAgentID';`n"
                        ) -Scope script
                        Set-Variable -Name action -Value 2 -Scope script
                        filler

                    }#end if statement

                }#end outer if/else statement

                if($script:auto -eq 'n'){ssnCorrectionsApp213}#end if statement

          }#end option 1

        #PFA_RECRUIT_DETAIL
        #ONLY VALUE TO UPDATE IS SSN, so if it is correct there is nothing to do here
        #Update to correct value.  If there are rows with both correct and incorrect values and the total_type column descriptions are the same, 
        #delete rows with incorrect value
        2 {
                $message = 
                "`nPFA RECRUIT DETAIL NOTE:
Update to correct value. 
If there are rows with both correct and incorrect values and the total_type colum descriptions are the same
delete rows with incorrect value"
                Set-Variable -Name tableName -Value $pfa_Recruit_Detail -Scope script

                if($script:bogusSSNFlag -eq 'y' -or $script:newSSN -eq 'y'){

                    Set-Variable -Name comment -Value "--PFA RECRUIT DETAILS" -Scope script
                    Set-Variable -Name selectStatement -Value (
"SELECT $script:column9, $script:column10
,$script:column1
FROM $script:tableName
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script
                    if($script:newSSN -eq 'y'){
                    Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
WHERE $script:column1 = '$script:incorrectSSN';`n") -Scope script
                    }
                    else{
                    Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:bogusSSN'
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script}#end if/else statement
                    Set-Variable -Name action -Value 2 -Scope script
                    filler

                }
                else{
                Write-Host $message -ForegroundColor Yellow
                Set-Variable -Name prompt -Value "PFA RECRUIT DETAIL`nDuplicate rows?" -Scope script
                yesNoQuestion
                Set-Variable -Name deleteRow -Value $script:selection -Scope script

                    
                 if($script:deleteRow -eq 'y'){
                            
                                #delete row with incorrect info
                                Set-Variable -Name comment -Value "--REMOVE ROW WITH INCORRECT INFO" -Scope script
                                Set-Variable -Name selectStatement -Value (
                                "SELECT *`nFROM $script:tableName`nWHERE $script:column1 = '$script:incorrectSSN';`n"
                                ) -Scope script
                                Set-Variable -Name deleteStatement -Value (
                               "DELETE FROM $script:tableName`nWHERE $script:column1 = '$script:incorrectSSN';`n"
                                ) -Scope script
                                Set-Variable -Name action -Value 1 -Scope script
                                Clear-Variable -Name deleteRow -Scope script
                                filler
                            }
                            else{
                                
                                Set-Variable -Name prompt -Value "PFA RECRUIT DETAIL`nDoes the SSN need to be corrected?" -Scope script
                                yesNoQuestion

                                if($script:selection -eq 'y')
                                {
                                 #one row to update
                                 Set-Variable -Name comment -Value "--UPDATE ROW TO CORRECT INFO" -Scope script
                                 Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column3
FROM $script:tableName
WHERE $script:column1 IN ('$script:incorrectSSN','$script:correctSSN' );`n"
                                ) -Scope script
                                Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
WHERE $script:column1 = '$script:incorrectSSN';`n"
                                ) -Scope script
                                Set-Variable -Name action -Value 2 -Scope script
                                filler
                                }#end if function

                            }#end if/else statement

                    #New agent ID has recruits
                    if($script:hasRecruits -eq 'y'){
                        
                        Set-Variable -Name comment -Value "--UPDATE RECRUITER_ID TO CORRECT AGENT ID" -Scope script
                        Set-Variable -Name selectStatement -Value (
"SELECT $script:column3
FROM $script:tableName
WHERE $script:column3 IN ('$script:incorrectAgentID', '$script:correctAgentID' );`n"
                        ) -Scope script
                        Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column3 = '$script:correctAgentID'
WHERE $script:column3 = '$script:incorrectAgentID';`n"
                        ) -Scope script
                        Set-Variable -Name action -Value 2 -Scope script
                        filler

                    }#end if statement
                    }#end outer if/else statement
                if($script:auto -eq 'n'){ssnCorrectionsApp213}#end if statement

          }#end option 2

        #COMMON_AGENT
        #SSN, AGENT_ID, CLIENT_ID - DELETE ORIGINAL ROW AND UPDATE CURRENT ROW WITH CORRECT VALUES
        #ONLY 1 ROW SHOULD REMAIN WITH CURRENT INFORMATIN
        3 {
                #part 1: delete original row (usually correct info)
                Set-Variable -Name tableName -Value $common_Agent -Scope script

                if($script:bogusSSNFlag -eq 'y' -or $script:newSSN -eq 'y'){

                    Set-Variable -Name comment -Value "--COMMON AGENT" -Scope script
                    Set-Variable -Name selectStatement -Value (
"SELECT $script:column2, $script:column5, $script:column4
,$script:column7, $script:column8
FROM $script:tableName
WHERE $script:column2 = '$script:correctAgentID'
AND $script:column5 = $script:correctClientID
AND $script:column4 = '$script:correctSSN';`n") -Scope script
                    if($script:newSSN -eq 'y'){
                    Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column4 = '$script:correctSSN'
WHERE $script:column2 = '$script:correctAgentID'
AND $script:column5 = $script:correctClientID
AND $script:column4 = '$script:incorrectSSN';`n") -Scope script
                    }
                    else{
                    Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column4 = '$script:bogusSSN'
WHERE $script:column2 = '$script:correctAgentID'
AND $script:column5 = $script:correctClientID
AND $script:column4 = '$script:correctSSN';`n") -Scope script}#end if/else statement
                    Set-Variable -Name action -Value 2 -Scope script
                    filler

                }
                else{

                Set-Variable -Name comment -Value "--REMOVE OLDEST ROW" -Scope script
                Set-Variable -Name selectStatement -Value (
                "SELECT *`nFROM $script:tableName`nWHERE $script:column4 = '$script:oldestRow';`n"
                ) -Scope script
                Set-Variable deleteStatement -Value (
                "DELETE FROM $script:tableName`nWHERE $script:column4 ='$script:oldestRow';`n"
                 ) -Scope script
                 Set-Variable -Name action -Value 1 -Scope script
                 filler

                 #part 2: Update current row to correct info
                 Set-Variable -Name tableName -Value $common_Agent -Scope script 
                 Set-Variable -Name comment -Value "--UPDATE NEW ROW TO CORRECT VALUE
--CORRECT SSN: $script:correctSSN
--CORRECT CLIENT ID: $script:correctClientID
--CORRECT AGENT ID: $script:correctAgentID" -Scope script
                 Set-Variable -Name selectStatement -Value (
"SELECT $script:column4, $script:column5, $script:column2
FROM $script:tableName
WHERE $script:column4 IN ('$script:incorrectSSN','$script:correctSSN');`n"
                 ) -Scope script
                Set-Variable -Name updateStatement -Value (
                "UPDATE $script:tableName
SET $script:column4 = '$script:correctSSN'
,$script:column5 = '$script:correctClientID'
,$script:column2 = '$script:correctAgentID'
WHERE $script:column4 = '$script:newestRow';`n"
                ) -Scope script
                Set-Variable -Name action -Value 2 -Scope script
                filler

                    #New agent ID has recruits
                    if($script:hasRecruits -eq 'y'){
                        
                        Set-Variable -Name comment -Value "--UPDATE RECRUITER_ID TO CORRECT AGENT ID" -Scope script
                        Set-Variable -Name selectStatement -Value (
"SELECT $script:column2 AS ""RECRUIT"", $script:column3
FROM $script:tableName
WHERE $script:column3 IN ('$script:incorrectAgentID','$script:correctAgentID');`n"
                        ) -Scope script
                        Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column3 = '$script:correctAgentID'
WHERE $script:column3 = '$script:incorrectAgentID';`n"
                        ) -Scope script
                        Set-Variable -Name action -Value 2 -Scope script
                        filler

                    }#end if statement
                    }#end outer if/else statement

                 if($script:auto -eq 'n'){ssnCorrectionsApp213}#end if statement
            }#end option 3

         #ACF_COMMON_AGENT
         #SSN, AGENT_ID, CLIENT_ID - DELETE ORIGINAL ROW AND UPDATE CURRENT ROW WITH CORRECT VALUES
         #ONLY 1 ROW SHOULD REMAIN WITH CURRENT INFORMATON
        4 {

                    #part 1: delete original row (usually correct info)
                     Set-Variable -Name tableName -Value $acf_Common_Agent -Scope script

                     if($script:bogusSSNFlag -eq 'y' -or $script:newSSN -eq 'y'){

                       Set-Variable -Name comment -Value "--ACF COMMON AGENT" -Scope script
                       Set-Variable -Name selectStatement -Value (
"SELECT $script:column2, $script:column5, $script:column4
,$script:column7, $script:column8
FROM $script:tableName
WHERE $script:column2 = '$script:correctAgentID'
AND $script:column5 = $script:correctClientID
AND $script:column4 = '$script:correctSSN';`n") -Scope script
                       if($script:newSSN -eq 'y'){
                       Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column4 = '$script:correctSSN'
WHERE $script:column2 = '$script:correctAgentID'
AND $script:column5 = $script:correctClientID
AND $script:column4 = '$script:incorrectSSN';`n") -Scope script}
                       else{
                       Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column4 = '$script:bogusSSN'
WHERE $script:column2 = '$script:correctAgentID'
AND $script:column5 = $script:correctClientID
AND $script:column4 = '$script:correctSSN';`n") -Scope script}#end if/else statement
                       Set-Variable -Name action -Value 2 -Scope script
                       filler

                     }
                     else{
                     Set-Variable -Name comment -Value "--REMOVE OLDEST ROW" -Scope script
                     Set-Variable -Name selectStatement -Value (
                     "SELECT *`nFROM $script:tableName`nWHERE $script:column4 = '$script:oldestRow';`n"
                      ) -Scope script
                      Set-Variable deleteStatement -Value (
                      "DELETE FROM $script:tableName`nWHERE $script:column4 ='$script:oldestRow';`n"
                      ) -Scope script
                     Set-Variable -Name action -Value 1 -Scope script
                     filler

                     #part 2: Update current row to correct info
                     Set-Variable -Name tableName -Value $acf_Common_Agent -Scope script 
                     Set-Variable -Name comment -Value "--UPDATE NEW ROW TO CORRECT VALUE
--CORRECT SSN: $script:correctSSN
--CORRECT CLIENT ID: $script:correctClientID
--CORRECT AGENT ID: $script:correctAgentID" -Scope script
                     Set-Variable -Name selectStatement -Value (
"SELECT $script:column4, $script:column5, $script:column2
FROM $script:tableName
WHERE $script:column4 IN ('$script:incorrectSSN','$script:correctSSN');`n"
                     ) -Scope script
                    Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column4 = '$script:correctSSN'
,$script:column5 = '$script:correctClientID'
,$script:column2 = '$script:correctAgentID'
WHERE $script:column4 = '$script:incorrectSSN';`n"
                     ) -Scope script

                     Set-Variable -Name action -Value 2 -Scope script
                     filler

                    #New agent ID has recruits
                    if($script:hasRecruits -eq 'y'){
                        
                        Set-Variable -Name comment -Value "--UPDATE RECRUITER_ID TO CORRECT AGENT ID" -Scope script
                        Set-Variable -Name selectStatement -Value (
"SELECT $script:column2 AS ""RECRUIT"", $script:column3
FROM $script:tableName
WHERE $script:column3 IN ('$script:incorrectAgentID','$script:correctAgentID');`n"
                        ) -Scope script
                        Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column3 = '$script:correctAgentID'
WHERE $script:column3 = '$script:incorrectAgentID';`n"
                        ) -Scope script
                        Set-Variable -Name action -Value 2 -Scope script
                        filler

                    }#end if statement
                    }#end outer if/else statement

                 if($script:auto -eq 'n'){ssnCorrectionsApp213}#end if statement
                }#end option 4

        5 {if($script:bogusSSNFlag -ne 'y'){app213Optional}}#end option 5

        #Exit
        6 {
                addSpace  
                if($script:auto -eq 'n'){ssnCorrections} 
          }#end option 6
     
    } #end switch case

 }#end function

 #APPCODE 213 OPTIONAL TABLES
function app213Optional{
        #FIELD_TRAINING_DETAILS
        #AGENT_ID  - Will have current agent_id  on this table
        #ALWAYS DELETE - DO NOT UPDATE (ROW WILL REBUILD)
        
        Set-Variable -Name prompt -Value "Add optional Table FIELD TRAINING DETAILS" -Scope script
        yesNoQuestion
            
            if($script:selection -eq 'y'){
                Set-Variable -Name tableName -Value $filed_Training_Details -Scope script

                 Set-Variable -Name comment -Value "--REMOVE ROW --DONT UPDATE, ROW WILL REBUILD" -Scope script
                 Set-Variable -Name selectStatement -Value (
                 "SELECT *`nFROM $script:tableName`nWHERE $script:column2 = '$script:incorrectAgentID';`n"
                 ) -Scope script
                 Set-Variable deleteStatement -Value (
                 "DELETE FROM $script:tableName`nWHERE $script:column2 ='$script:incorrectAgentID';`n"
                 ) -Scope script
                 Set-Variable -Name action -Value 1 -Scope script
                 filler
                 
                 #part 2 APP 207
                 #Always delete from APP 207 FIELD_TRAINING_BONUS when deleting from Field Training Details
                 Set-Variable -Name tableName -Value $filed_Training_Bonus -Scope script
                 Set-Variable -Name comment -Value "--REMOVE ROW --DONT UPDATE, ROW WILL REBUILD" -Scope script
                 Set-Variable -Name selectStatement -Value (
                 "SELECT *`nFROM $script:tableName`nWHERE $script:column2 = '$script:incorrectAgentID';`n") -Scope script
                 Set-Variable deleteStatement -Value (
                 "DELETE FROM $script:tableName`nWHERE $script:column2 ='$script:incorrectAgentID';`n"
                 ) -Scope script
                 Set-Variable -Name action -Value 1 -Scope script
                 filler
                 }#end if statement

                 #if($script:auto -eq 'n'){ssnCorrectionsApp213}#end if statement
          
}#end function

#APPCODE 267
function ssnCorrectionsApp267{

     #Step 2: add number of possible menu answers
     Set-Variable -Name possibleValues -Value (@(1..4)) -Scope script
     Set-Variable -Name column1 -Value "SSN_TAXID" -Scope script
     Set-Variable -Name column2 -Value "CLIENT_ID" -Scope script
     Set-Variable -Name column3 -Value "AGENT_ID" -Scope script
     Set-Variable -Name column4 -Value "MT_TIMESTAMP" -Scope script
     Set-Variable -Name column5 -Value "RECRUITER" -Scope script
     Set-Variable -Name column6 -Value "INIT_ATND_DATE" -Scope script
     Set-Variable -Name column7 -Value "SRS_CMPL_DATE" -Scope script
     Set-Variable -Name column8 -Value "SRS_CMPL_DATE_SID" -Scope script
     Set-Variable -Name column9 -Value "B07_ALERT_SOURCE" -Scope script
     Set-Variable -Name column10 -Value "B07_ALERT_DATE" -Scope script
     Set-Variable -Name column11 -Value "LAST_NAME" -Scope script
     Set-Variable -Name column12 -Value "FIRST_NAME" -Scope script

     #step 3: allow selection
     if($script:auto -ne 'y')
        {
             #banner
             Write-Host "`nApp 267 Tables Menu" -ForegroundColor Cyan

            #STEP 1: show menu
            Write-Host $app267Tables  

             userSelection

      }#end if function

     #step 5: switch statement
     switch ($script:selection) {
        #RECRUIT_TRACK
        #SSN_TAXID, AGENT_ID, CLIENT_ID 
        #DELETE ORIGINAL ROW AND UPDATE CURRENT ROW WITH CORRECT VALUES
        #If there is prelicensing course in the original file, update 
        1 {

                Set-Variable -Name tableName -Value $recruit_Track -Scope script
            
                if($script:bogusSSNFlag -eq 'y' -or $script:newSSN -eq 'y'){

                    Set-Variable -Name comment -Value "--RECRUIT TRACK" -Scope script
                    Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column3
,$script:column2, $script:column11, $script:column12
FROM $script:tableName
WHERE $script:column3 = '$script:correctAgentID'
AND $script:column2 = '$script:correctClientID'
AND $script:column1 = '$script:correctSSN';`n") -Scope script
                    if($script:newSSN -eq 'y'){
                    Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
WHERE $script:column3 ='$script:correctAgentID'
AND $script:column2 = $script:correctClientID
AND $script:column1 = '$script:incorrectSSN';`n") -Scope script
                    }
                    else{
                    Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:bogusSSN'
WHERE $script:column3 ='$script:correctAgentID'
AND $script:column2 = $script:correctClientID
AND $script:column1 = '$script:correctSSN';`n") -Scope script}#end if/else statement
                    Set-Variable -Name action -Value 2 -Scope script
                    filler

                }
                else{
                #get MT_TIMESTAMP
                $message = 
                "`nRECRUIT TRACK NOTE:
Delete original row and update current row with correct values. Will delete rows with the same MT_TIMESTAMP as row being deleted."
                Write-Host $message -ForegroundColor Yellow
                Set-Variable -Name prompt -Value "RECRUIT TRACK`nEnter value for MT_TIMESTAMP" -Scope script
                ConfirmUserInput
                Set-Variable -Name mtTimeStamp -Value $script:userInput -Scope script

                #check if agent has prelicensing course
                $message = 
                "`nIf there is prelicensing course in the original file, update new row to reflect it."
                Write-Host $message -ForegroundColor Yellow
                Set-Variable -Name prompt -Value "Prelicensing present in row being delete?" -Scope script
                yesNoQuestion
                Set-Variable -Name prelicenseFlag -Value $script:selection -Scope script

               
                $message = 
                "`nDelete original row and update current row with correct values. 
Will delete rows with the same MT_TIMESTAMP as row being deleted."
                Write-Host $message -ForegroundColor Yellow
                Set-Variable -Name prompt -Value "RECRUIT TRACK`nMore than one row" -Scope script
                yesNoQuestion
                Set-Variable -Name deleteRow -Value $script:selection -Scope script

                #option 1: 2 rows. Delete original and update new row
                if($deleteRow -eq 'y'){
                        #part 1: delete original row (usually correct info)
                        Set-Variable -Name tableName -Value $recruit_Track -Scope script
                        Set-Variable -Name comment -Value "--REMOVE OLDEST ROW" -Scope script
                        Set-Variable -Name selectStatement -Value (
"SELECT *
FROM $script:tableName
WHERE $script:column1 = '$script:oldestRow';`n"
                        ) -Scope script
                        Set-Variable deleteStatement -Value (
"DELETE FROM $script:tableName
WHERE $script:column1 = '$script:oldestRow';`n"
                        ) -Scope script
                        Set-Variable -Name action -Value 1 -Scope script
                        filler
                        }#end if statement

                #Update 
                if($script:prelicenseFlag -eq 'y'){

                                #get one time values
                                Set-Variable -Name prompt -Value "INIT_ATND_DATE" -Scope script
                                ConfirmUserInput
                                Set-Variable -Name initAtndDate -Value $script:userInput 

                                Set-Variable -Name prompt -Value "SRS_CMPL_DATE" -Scope script
                                ConfirmUserInput
                                Set-Variable -Name srsCmplDate -Value $script:userInput 

                                Set-Variable -Name prompt -Value "B07_ALERT_DATE" -Scope script
                                ConfirmUserInput
                                Set-Variable -Name alertDate -Value $script:userInput 

                                Set-Variable -Name class -Value "Prelicensing classes"

                                Set-Variable -Name comment -Value "--UPDATE NEW ROW " -Scope script
                                Set-Variable -Name selectStatement -Value (
                                 "SELECT $script:column1
,$script:column3
,$script:column2
,$script:column6
,$script:column7
,$script:column8
,$script:column9
,$script:column10
FROM $script:tableName
WHERE $script:column1 IN ('$script:incorrectSSN', '$script:correctSSN' );`n"
                                 ) -Scope script
                                 Set-Variable -Name updateStatement -Value (
                                 "UPDATE $script:tableName
SET $script:column1= '$script:correctSSN'
,$script:column3 = '$script:correctAgentID'
,$script:column2 = $script:correctClientID
,$script:column6 = '$initAtndDate'
,$script:column7 = '$srsCmplDate'
,$script:column8 = 'S'
,$script:column9 = '$class'
,$script:column10 = '$alertDate'
WHERE $script:column1 = '$script:newestRow';`n"
                                 ) -Scope script
                                 Set-Variable -Name action -Value 2 -Scope script
                                 filler

                            }
                else{
                                Set-Variable -Name tableName -Value $recruit_Track -Scope script 
                                Set-Variable -Name comment -Value "--UPDATE CURRENT ROW WITH CORRECT INFO" -Scope script
                                Set-Variable -Name selectStatement -Value (
                                 "SELECT $script:column1, $script:column3, $script:column2`nFROM $script:tableName
WHERE $script:column1 IN ('$script:incorrectSSN','$script:correctSSN');`n") -Scope script
                                 Set-Variable -Name updateStatement -Value (
                                 "UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
,$script:column2 = $script:correctClientID
,$script:column3 = '$script:correctAgentID'
WHERE $script:column1 = '$script:newestRow';`n"
                                 ) -Scope script
                                Set-Variable -Name action -Value 2 -Scope script
                                filler
                            }#end if/else statement


                     #New agent ID has recruits
                    if($script:hasRecruits -eq 'y'){
                        
                        Set-Variable -Name comment -Value "--UPDATE RECRUITER_ID TO CORRECT AGENT ID" -Scope script
                        Set-Variable -Name selectStatement -Value (
                        "SELECT $script:column2 AS ""RECRUIT"", $script:column5`nFROM $script:tableName`nWHERE $script:column5 IN ('$script:incorrectAgentID', '$script:correctAgentID');`n"
                        ) -Scope script
                        Set-Variable -Name updateStatement -Value (
                        "UPDATE $script:tableName`nSET $script:column5 = '$script:correctAgentID'`nWHERE $script:column5 = '$script:incorrectAgentID';`n"
                        ) -Scope script
                        Set-Variable -Name action -Value 2 -Scope script
                        filler

                    }#end if statement
                    }#end outer if/else statement

                if($script:auto -eq 'n'){ssnCorrectionsApp267}#end if statement

          }#end option 1
        #RECRUIT_HISTORY
        #MT_TIMESTAMP
        #DELETE ROWS WITH THE SAME MT_TIMESTAMP ON THE RECRUIT_TRACK ROW BEING DELETED
        2 {
                Set-Variable -Name tableName -Value $recruit_History -Scope script
                if($script:ssnCorrections -eq 'y' -or $script:newInfo -eq 'y'){
                Set-Variable -Name comment -Value "--REMOVE ROW WITH SAME MT_TIMESTAMP AS DELETED ROW" -Scope script
                Set-Variable -Name selectStatement -Value (
                "SELECT *`nFROM $script:tableName`nWHERE $script:column4 = '$script:mtTimeStamp';`n"
                ) -Scope script
                Set-Variable deleteStatement -Value (
                "DELETE FROM $script:tableName`nWHERE $script:column4 ='$script:mtTimeStamp';`n"
                 ) -Scope script
                Set-Variable -Name action -Value 1 -Scope script
                filler
                }#end if statement
                if($script:auto -eq 'n'){ssnCorrectionsApp267}#end if statement
          }#end option 2
        #RECRUIT_DETAIL
        #MT_TIMESTAMP
        #DELETE ROWS WITH THE SAME MT_TIMESTAMP ON THE RECRUIT_TRACK ROW BEING DELETED
        3 {
                if($script:ssnCorrections -eq 'y' -or $script:newInfo -eq 'y'){
                Set-Variable -Name tableName -Value $recruit_Detail -Scope script
                Set-Variable -Name comment -Value "--REMOVE ROW WITH SAME MT_TIMESTAMP AS DELETED ROW" -Scope script
                Set-Variable -Name selectStatement -Value (
                "SELECT *`nFROM $script:tableName`nWHERE $script:column4 = '$script:mtTimeStamp';`n"
                ) -Scope script
                Set-Variable deleteStatement -Value (
                "DELETE FROM $script:tableName`nWHERE $script:column4 ='$script:mtTimeStamp';`n"
                 ) -Scope script
                 Set-Variable -Name action -Value 1 -Scope script
                 filler
                 }#end if statement

                 if($script:auto -eq 'n'){ssnCorrectionsApp267}#end if statement
            }#end option 3
         #Exit
        4{
                addSpace  
                if($script:auto -eq 'n'){ssnCorrections} 
          }#end option 4
   
    } #end switch case

}#end function

#APPCODE 300
function ssnCorrectionsApp300{

     #Step 2: add number of possible menu answers
     Set-Variable -Name possibleValues -Value (@(1..9)) -Scope script
     Set-Variable -Name column1 -Value "SOC_SEC_NUM" -Scope script
     Set-Variable -Name column2 -Value "AGENT_ID" -Scope script
     Set-Variable -Name column3 -Value "HIRE_DATE" -Scope script
     Set-Variable -Name column4 -Value "COMPANY_NUM" -Scope script

     #step 3: allow selection
     if($script:auto -ne 'y')
        {
             #banner
            Write-Host "`nApp 300 Tables Menu" -ForegroundColor Cyan

            #STEP 1: show menu
             Write-Host $app300Tables 

             userSelection

      }#end if function

     #step 5: switch statement
     switch ($script:selection) 

    {
        #ACF_AGREEMENT
        #SOC_SEC_NUM, AGENT_ID
        #DELETE OLDEST ROWS THAT HAVE TERMINATION DATE WITH ORIGINAL AGENT_ID, THEN UPDATE NEWER ROWS WITH CORRECT VALUES
        1 {
                Set-Variable -Name tableName -Value $acf_Agreement -Scope script

                if($script:bogusSSNFlag -eq 'y' -or $script:newSSN -eq 'y'){

                    Set-Variable -Name comment -Value "--ACF AGRREMENT" -Scope script
                    Set-Variable -Name selectStatement -Value (
"SELECT $script:column2, $script:column1
FROM $script:tableName
WHERE $script:column1 = '$script:correctSSN'
AND $script:column2 = '$script:correctAgentID'
AND $script:column4 = '04';`n") -Scope script
                    if($script:newSSN -eq 'y'){
                    Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
WHERE $script:column1 = '$script:incorrectSSN'
AND $script:column2 = '$script:correctAgentID'
AND $script:column4 = '04';`n") -Scope script
                    }
                    else{
                    Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:bogusSSN'
WHERE $script:column1 = '$script:correctSSN'
AND $script:column2 = '$script:correctAgentID'
AND $script:column4 = '04';`n") -Scope script}#end if/else statement
                    Set-Variable -Name action -Value 2 -Scope script
                    filler

                }
                else{
                #part 1: delete oldest row (usually original agent id)
                Set-Variable -Name comment -Value "--REMOVE ORIGINAL ROW" -Scope script
                Set-Variable -Name selectStatement -Value (
                "SELECT *`nFROM $script:tableName`nWHERE $script:column1 = '$script:oldestRow';`n"
                ) -Scope script
                Set-Variable deleteStatement -Value (
                "DELETE FROM $script:tableName`nWHERE $script:column1 ='$script:oldestRow';`n"
                ) -Scope script
                Set-Variable -Name action -Value 1 -Scope script
                filler

                #part 2: Update newer row with correct info
                Set-Variable -Name comment -Value "--UPDATE NEW ROW TO CORRECT SSN AND AGENT ID
--CORRECT SSN: $script:correctSSN
--CORRECT AGENT ID: $script:correctAgentID" -Scope script
                Set-Variable -Name selectStatement -Value (
                "SELECT $script:column1, $script:column2`nFROM $script:tableName
WHERE $script:column1 IN ('$script:incorrectSSN','$script:correctSSN');`n"
                 ) -Scope script
                Set-Variable -Name updateStatement -Value (
                 "UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
, $script:column2 = '$script:correctAgentID'
WHERE $script:column1 = '$script:newestRow';`n"
                  ) -Scope script
                Set-Variable -Name action -Value 2 -Scope script
                filler
                  }#end outer if/else statement
        
                if($script:auto -eq 'n'){ssnCorrectionsApp300}#end if statement
          }#end option 1

        #ACF_AUDIT_HISTORY
        #AGENT_ID
        #UPDATE ROWS WITH CORRECT AGENT_ID
        2 {
                if($script:ssnCorrections -eq 'y' -or $script:newInfo -eq 'y'){
                #best to select only wrong agent as there could be a lot of rows
                Set-Variable -Name tableName -Value $acf_Audit_History -Scope script
                Set-Variable -Name comment -Value "--UPDATE ROW TO CORRECT AGENT ID
--CORRECT AGENT ID: $script:correctAgentID" -Scope script
                Set-Variable -Name selectStatement -Value (
                "SELECT COUNT($script:column2)`nFROM $script:tableName`nWHERE $script:column2 = '$script:incorrectAgentID';`n"
                ) -Scope script
                Set-Variable -Name updateStatement -Value (
                "UPDATE $script:tableName`nSET $script:column2 = '$script:correctAgentID'
WHERE $script:column2 = '$script:incorrectAgentID';`n"
                 ) -Scope script
                Set-Variable -Name action -Value 2 -Scope script
                filler
                }#end if statement
                if($script:auto -eq 'n'){ssnCorrectionsApp300}#end if statement

          }#end option 2

        #ACF_BALANCES
        #AGENT_ID
        #VERIFY NO BALANCES ARE SHOWING FOR NEW AGENT_ID AND DELETE NEW AGENT_ID 
        3 {
                if($script:ssnCorrections -eq 'y' -or $script:newInfo -eq 'y'){
                Set-Variable -Name tableName -Value $acf_Balances -Scope script
                Set-Variable -Name comment -Value "--VERIFY NO BALANCE`n--REMOVE NEW AGENT ID" -Scope script
                Set-Variable -Name selectStatement -Value (
                "SELECT *`nFROM $script:tableName`nWHERE $script:column2 = '$script:incorrectAgentID';`n"
                ) -Scope script
                Set-Variable deleteStatement -Value (
                "DELETE FROM $script:tableName`nWHERE $script:column2 ='$script:incorrectAgentID';`n"
                 ) -Scope script
                 Set-Variable -Name action -Value 1 -Scope script
                 filler
                 }#end if statement
                if($script:auto -eq 'n'){ssnCorrectionsApp300}#end if statement
            }#end option 3

         #ACF_CONTRACT
         #AGENT_ID
         #UPDATE TO CORRECT AGENT_ID
        4{
                if($script:ssnCorrections -eq 'y' -or $script:newInfo -eq 'y'){
                Set-Variable -Name tableName -Value $acf_Contract -Scope script
                Set-Variable -Name comment -Value "--UPDATE TO CORRECT AGENT ID" -Scope script
                Set-Variable -Name selectStatement -Value (
                "SELECT $script:column2`nFROM $script:tableName
WHERE $script:column2 IN ('$script:incorrectAgentID','$script:correctAgentID');`n"
                ) -Scope script
                Set-Variable -Name updateStatement -Value (
                "UPDATE $script:tableName`nSET $script:column2 = '$script:correctAgentID'
WHERE $script:column2 = '$script:incorrectAgentID';`n"
                 ) -Scope script
                Set-Variable -Name action -Value 2 -Scope script
                filler
                }#if statement
                if($script:auto -eq 'n'){ssnCorrectionsApp300}#end if statement
            }#end option 4

        #ACF_CONTROL
        #SOC_SEC_NUM,  AGENT_ID, HIRE_DATE
        #DELETE LATEST ROWS WITH TERMINATED AGENT ID
        5{
              Set-Variable -Name tableName -Value $acf_Control -Scope script

              if($script:bogusSSNFlag -eq 'y' -or $script:newSSN -eq 'y'){

                    Set-Variable -Name comment -Value "--CHANGE SSN TO BOGUS SSN" -Scope script
                    Set-Variable -Name selectStatement -Value (
"SELECT $script:column2, $script:column1
FROM $script:tableName
WHERE $script:column1 = '$script:correctSSN'
AND $script:column2 = '$script:correctAgentID'
AND $script:column4 = '04';`n") -Scope script
                    if($script:newSSN -eq 'y'){
                    Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
WHERE $script:column1 = '$script:incorrectSSN'
AND $script:column2 = '$script:correctAgentID'
AND $script:column4 = '04';`n") -Scope script}
                    else{
                    Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:bogusSSN'
WHERE $script:column1 = '$script:correctSSN'
AND $script:column2 = '$script:correctAgentID'
AND $script:column4 = '04';`n") -Scope script}#end if/else statement
                    Set-Variable -Name action -Value 2 -Scope script
                    filler

              }
              else{
              #part 1: delete original row (usually correct info)
              
              Set-Variable -Name comment -Value "--REMOVE ORIGINAL ROW" -Scope script
              Set-Variable -Name selectStatement -Value (
              "SELECT *`nFROM $script:tableName
WHERE $script:column1 = '$script:oldestRow';`n"
              ) -Scope script
              Set-Variable deleteStatement -Value (
              "DELETE FROM $script:tableName`nWHERE $script:column1 ='$script:oldestRow';`n"
              ) -Scope script
              Set-Variable -Name action -Value 1 -Scope script
              filler

              #part 2: Update new row to the correct info

              #get original hire date
              $message = 
              "`nACF CONTROL NOTE:
Delete original row, then update newest row with the correct values and originla hire date value."
              Write-Host $message -ForegroundColor Yellow
              Set-Variable -Name prompt -Value "ACF CONTROL`nOriginal Hire Date" -Scope script
              confirmUserInput
              Set-Variable -Name hireDate -Value $script:userInput -Scope script

              Set-Variable -Name comment -Value "--UPDATE NEW ROW TO CORRECT AGENT ID
--CORRECT AGENT ID: $script:correctAgentID" -Scope script
              Set-Variable -Name selectStatement -Value (
              "SELECT $script:column1, $script:column2, $script:column3`nFROM $script:tableName
WHERE $script:column1 IN ('$script:incorrectSSN','$script:correctSSN');`n"
               ) -Scope script
              Set-Variable -Name updateStatement -Value (
              "UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
,$script:column2 = '$script:correctAgentID'
,$script:column3 = '$script:hireDate'
WHERE $script:column1 = '$script:newestRow';`n") -Scope script
               Set-Variable -Name action -Value 2 -Scope script
               filler
               }#end outer if/sle statement
              if($script:auto -eq 'n'){ssnCorrectionsApp300}#end if statement
              }#end option 5

        #ACF HISTORY
        #AGENT_ID
        #UPDATE TO CORRECT AGENT_ID
        6{if($script:ssnCorrections -eq 'y' -or $script:newInfo -eq 'y'){app300Optional}}#end option 6

        #ACF_TITLE_HISTORY
        #AGENT_ID
        #UPDATE TO CORRECT AGENT_ID
        7{
               if($script:ssnCorrections -eq 'y' -or $script:newInfo -eq 'y'){
               Set-Variable -Name tableName -Value $acf_Title_History -Scope script
               Set-Variable -Name comment -Value "--UPDATE ROW TO CORRECT AGENT ID
--CORRECT AGENT ID: $script:correctAgentID" -Scope script
               Set-Variable -Name selectStatement -Value (
               "SELECT $script:column2`nFROM $script:tableName`nWHERE $script:column2 IN ('$script:incorrectAgentID','$script:correctAgentID');`n"
               ) -Scope script
               Set-Variable -Name updateStatement -Value (
               "UPDATE $script:tableName`nSET $script:column2 = '$script:correctAgentID'
WHERE $script:column2 = '$script:incorrectAgentID';`n"
                ) -Scope script
                Set-Variable -Name action -Value 2 -Scope script
                filler
                }#end if statement
               if($script:auto -eq 'n'){ssnCorrectionsApp300}#end if statement

               }#end option 7

        #ACFME_BALANCES
        #AGENT_ID
        #VERIFY NO BALANCES ARE SHOWING FOR NEW AGENT_ID AND DELETE NEW AGENT_ID 
        #best to show only deleted rows..too many on report
        8{
               
               if($script:ssnCorrections -eq 'y' -or $script:newInfo -eq 'y'){
               Set-Variable -Name tableName -Value $acfme_Balances -Scope script
               Set-Variable -Name comment -Value "--VERIFY NO BALANCE`n--REMOVE NEW AGENT ID" -Scope script
               #best to show only deleted rows..too many on report
               Set-Variable -Name selectStatement -Value (
               "SELECT *`nFROM $script:tableName`nWHERE $script:column2 = '$script:incorrectAgentID';`n"
               ) -Scope script
               Set-Variable deleteStatement -Value (
               "DELETE FROM $script:tableName`nWHERE $script:column2 ='$script:incorrectAgentID';`n"
                ) -Scope script
               Set-Variable -Name action -Value 1 -Scope script
               filler
               }#end is statement
               if($script:auto -eq 'n'){ssnCorrectionsApp300}#end if statement
             }#end option 7
             #Exit
        9{
                addSpace  
                if($script:auto -eq 'n'){ssnCorrections} 
          }#end option 8
   
    } #end switch case


}#end function

#APP 300 optional table
function app300Optional{

                Set-Variable -Name prompt -Value "Add optional Table ACF_HISTORY" -Scope script
                yesNoQuestion

                if($script:question -eq 'y')
                {
                    Set-Variable -Name tableName -Value $acf_History -Scope script
                    Set-Variable -Name comment -Value "--UPDATE NEW ROW TO CORRECT AGENT ID
    --CORRECT AGENT ID: $script:correctAgentID" -Scope script
                    Set-Variable -Name selectStatement -Value (
                    "SELECT $script:column2`nFROM $script:tableName`nWHERE $script:column2 = '$script:incorrectAgentID';`n"
                    ) -Scope script
                    Set-Variable -Name updateStatement -Value (
                    "UPDATE $script:tableName`nSET $script:column2 = '$script:correctAgentID'`nWHERE $script:column2 = '$script:incorrectAgentID';`n"
                     ) -Scope script
                    Set-Variable -Name action -Value 2 -Scope script
                    filler
                    if($script:auto -eq 'n'){ssnCorrectionsApp300}#end if statement
                }

}#end function

#APPCODE 318
function ssnCorrectionsApp318{

     #Step 2: add number of possible menu answers
     Set-Variable -Name possibleValues -Value (@(1..3)) -Scope script
     Set-Variable -Name column1 -Value "SOC_SEC_NUM" -Scope script
     Set-Variable -Name column2 -Value "RECRUITER" -Scope script
     Set-Variable -Name column3 -Value "AGENT_ID" -Scope script
     
     #step 3: allow selection
     if($script:auto -ne 'y')
        {
             #banner
            Write-Host "`nApp 318 Tables Menu" -ForegroundColor Cyan

            #STEP 1: show menu
            Write-Host $app318Tables 

             userSelection

      }#end if function

     #step 5: switch statement
     switch ($script:selection) 

    {
        #HMI_CONTROL
        #SOC_SEC_NUM, AGENT_ID
        #DELETE ROW WITH INCORRECT INFO
        1 {

                if($script:bogusSSNFlag -eq 'y' -or $script:newSSN -eq 'y'){
                    
                    Set-Variable -Name comment -Value "--HMI CONTROL" -Scope script
                    Set-Variable -Name selectStatement -Value (
"SELECT $script:column3, $script:column1
FROM $script:tableName
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script
                    if($script:newSSN -eq 'y'){
                    Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:correctSSN'
WHERE $script:column1 = '$script:incorrectSSN';`n") -Scope script
                    }
                    else{
                    Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:bogusSSN'
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script}#end if/else statement
                    Set-Variable -Name action -Value 2 -Scope script
                    filler
                }
                else{
                  Set-Variable -Name tableName -Value $hmi_Control -Scope script
                
                    #in newSSN case we must also update agentID to correct info
                    if($script:newInfo -eq 'y'){

                         Set-Variable -Name comment -Value "--REMOVE ROW WITH INCORRECT SSN" -Scope script
                        Set-Variable -Name selectStatement -Value (
"SELECT *
FROM $script:tableName
WHERE $script:column1 = '$script:incorrectSSN';`n"
                        ) -Scope script
                        Set-Variable deleteStatement -Value (
"DELETE FROM $script:tableName
WHERE $script:column1 ='$script:incorrectSSN';`n"
                        ) -Scope script
                        Set-Variable -Name action -Value 1 -Scope script
                        filler

                        Set-Variable -Name comment -Value "--UPDATE AGENT ID TO CORRECT VALUE" -Scope script
                        Set-Variable -Name selectStatement -Value (
"SELECT $script:column1, $script:column3
FROM $script:tableName
WHERE $script:column3 IN ('$script:incorrectAgentID','$script:correctAgentID');`n"
                        ) -Scope script
                        Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column3 = '$script:correctAgentID'
WHERE $script:column3 = '$script:incorrectAgentID';`n"
                        ) -Scope script
                        Set-Variable -Name action -Value 2 -Scope script
                        filler

                    }
                    else{

                        Set-Variable -Name comment -Value "--REMOVE ROW WITH INCORRECT INFO" -Scope script
                        Set-Variable -Name selectStatement -Value (
                        "SELECT *`nFROM $script:tableName`nWHERE $script:column1 = '$script:incorrectSSN';`n"
                        ) -Scope script
                        Set-Variable deleteStatement -Value (
                        "DELETE FROM $script:tableName`nWHERE $script:column1 ='$script:incorrectSSN';`n"
                        ) -Scope script
                        Set-Variable -Name action -Value 1 -Scope script
                        filler

                    }#end if/else statement
               

                    #New agent ID has recruits
                    if($script:hasRecruits -eq 'y'){
                        
                        Set-Variable -Name comment -Value "--UPDATE RECRUITER TO CORRECT AGENT ID" -Scope script
                        Set-Variable -Name selectStatement -Value (
"SELECT $script:column2
FROM $script:tableName
WHERE $script:column2 IN ('$script:incorrectAgentID','$script:correctAgentID');`n"
                        ) -Scope script
                        Set-Variable -Name updateStatement -Value (
"UPDATE $script:tableName
SET $script:column2 = '$script:correctAgentID'
WHERE $script:column2 = '$script:incorrectAgentID';`n"
                        ) -Scope script
                        Set-Variable -Name action -Value 2 -Scope script
                        filler

                    }#end if statement
                    }#end if/else statement

                    if($script:auto -eq 'n'){ssnCorrectionsApp318}#end if statement

          }#end option 1

        #HMI_LICENSE
        #SOC_SEC_NUM
        #UPDATE ONLY - DO NOT DELETE
        2 {app318Optional}#end option 2

        #Exit
        3 { 
                addSpace  
                if($script:auto -eq 'n'){ssnCorrections}
           }#end option 3
   
    } #end switch case

}#end function

#APPCODE 318 optional tables
function app318Optional{

        #HMI_LICENSE
        #SOC_SEC_NUM
        #UPDATE ONLY - DO NOT DELETE
        Set-Variable -Name prompt -Value "Add optional Table HMI_LICENSE" -Scope script
        yesNoQuestion

        if($script:selection -eq 'y')
        {
                 Set-Variable -Name tableName -Value $hmi_License -Scope script

                 if($script:bogusSSNFlag -eq 'y' -or $script:newSSN -eq 'y'){
                    Set-Variable -Name comment -Value "--HMI LICENSE" -Scope script
                    Set-Variable -Name selectStatement -Value (
"SELECT $script:column1
FROM $script:tableName
WHERE $script:column1 = '$script:correctSSN';`n") -Scope script
                    Set-Variable updateStatement -Value (
"UPDATE $script:tableName
SET $script:column1 = '$script:bogusSSN'
WHERE $script:column1 ='$script:correctSSN';`n") -Scope script
                    Set-Variable -Name action -Value 2 -Scope script
                    filler

                    #exit
                     addSpace  
                     if($script:auto -eq 'n'){ssnCorrections}#end if statement
                }
                else{
                Set-Variable -Name comment -Value "--UPDATE ROW TO CORRECT AGENT ID --DONT DELETE" -Scope script
                Set-Variable -Name selectStatement -Value (
                "SELECT $script:column1`nFROM $script:tableName`nWHERE $script:column1 = '$script:incorrectSSN';`n"
                ) -Scope script
                Set-Variable -Name updateStatement -Value (
                "UPDATE $script:tableName`nSET $script:column1 = '$script:correctSSN'`nWHERE $script:column1 = '$script:incorrectSSN';`n"
                 ) -Scope script
                Set-Variable -Name action -Value 2 -Scope script
                filler
                if($script:auto -eq 'n'){ssnCorrectionsApp318}#end if statement
                }#end if/else statement

            }#end if statement

}#end function

#APPCODE 101 student table
function ssnCorrectionsApp101{

     Set-Variable -Name possibleValues -Value (@(1..2)) -Scope script
     Set-Variable -Name column1 -Value "STUDENTID" -Scope script
     Set-Variable -Name column2 -Value "STUDENTSSN" -Scope script
     Set-Variable -Name column3 -Value "STUDENTUSERNAME" -Scope script
     Set-Variable -Name column4 -Value "IS_ACTIVE" -Scope script
     Set-Variable -Name column5 -Value "AGENTSTATUS" -Scope script
     Set-Variable -Name column6 -Value "CLIENTID" -Scope script
     Set-Variable -Name column7 -Value "LOGONID" -Scope script
     Set-Variable -Name column8 -Value "AGENT_ID" -Scope script
     Set-Variable -Name column9 -Value "UPLOADFLAG" -Scope script

      if($script:auto -ne 'y')
        {
             #banner
            Write-Host "`nApp 101 Tables Menu" -ForegroundColor Cyan

            #STEP 1: show menu
            Write-Host $app101Tables 

            userSelection

      }#end if function

       switch ($script:selection) 

    {
        #TBL_STUDENT
        #STUDENTID, STUDENTUSERNAME, CLIENTID, LOGONID, AGENT_ID, UPLOAD_FLAG
        #ONLY ONE ROW ALLOWED. 
        #MAKE SURE TO KEEP AGENTID AND CLIENT ID MATCHING OTHER TABLES
        1 {

                  Set-Variable -Name prompt -Value "`nDo you want to add APP 101 TBL_STUDENT?" -Scope script
                  yesNoQuestion
                  if($script:selection -eq 'y'){
                        
                        Set-Variable -Name tableName -Value $tbl_Student -Scope script

                  $message = 
                   "`nTBL STUDENT NOTE:
remove duplicate inactive row. Update the other row to the correct clientID, AgentID, and SSN last 4"
                   Write-Host $message -ForegroundColor Yellow

                    #delete row with agent id being removed
                    Set-Variable -Name comment -Value "--REMOVE DUPLICATE ROW" -Scope script
                    Set-Variable -Name selectStatement -Value (
                    "SELECT *`nFROM $script:tableName`nWHERE $script:column8 = '$script:correctAgentID';`n"
                    ) -Scope script
                    Set-Variable deleteStatement -Value (
                    "DELETE FROM $script:tableName`nWHERE $script:column8 ='$script:correctAgentID';`n"
                    ) -Scope script
                    Set-Variable -Name action -Value 1 -Scope script
                    filler

                     #update row being kept
                      Set-Variable -Name comment -Value "--UPDATE ROW BEING KEPT" -Scope script
                      Set-Variable -Name selectStatement -Value (
"SELECT $script:column1,$script:column2,$script:column3
,$script:column4,$script:column5,$script:column6
,$script:column7,$script:column8,$script:column9
FROM $script:tableName
WHERE $script:column8 IN ('$script:incorrectAgentID','$script:correctAgentID');`n"
                      ) -Scope script
                      Set-Variable -Name updateStatement -Value(
"UPDATE $script:tableName
SET $script:column2 = 
,$script:column3 = '$script:correctAgentID'
,$script:column6 = $script:correctClientID
,$script:column7 = '$script:correctAgentID'
,$script:column8 = '$script:correctAgentID'
,$script:column9 = 'Y'
WHERE $script:column8 = '$script:incorrectAgentID';`n"
                      ) -Scope script
                      Set-Variable -Name action -Value 2 -Scope script
                      filler
                  }#end if statement

                  if($script:auto -eq 'n'){ssnCorrectionsApp101}#end if statement

          }#end option 1

        #Exit
        2 { 
                addSpace  
                if($script:auto -eq 'n'){ssnCorrections}
           }#end option 3
   
    } #end switch case

}#end function

#filler
function filler{

     getChangeCounter 
     addChangeComment 
     addSelectStatement

     #if value then choose between insert, delete, update
     switch($script:action)
     {
        1 {addDeleteStatement}
        2 {addUpdateStatement}
     }

     addSelectStatement
     Set-Variable -Name placeholder -Value $script:tableName -Scope script
     Set-Variable -Name tableName -Value $script:tableName.Substring(8) -Scope script
     Write-Host "`n$script:tableName`nDone" -ForegroundColor Green
     Set-Variable -Name tableName -Value $script:placeholder -Scope script
     
}#end function



                    ###############################################
                    #                                     FILE                                          #
                    ###############################################


#create a file
function createFile{

   if(Test-Path -Path "$path\SPUFI $current_Date.txt") {
   
        Write-Host "`nFile SPUFI $current_Date already exists. Adding to file." -foreground GREEN

        Set-Variable -Name file -Value "$path\SPUFI $current_Date.txt" -Scope script
        Set-Variable -Name counterIndicator -Value 1 -Scope script
        SetCounterToTotal
   
   } else {

        #create file
        Set-Variable -Name file -Value (New-Item -Path "$path\SPUFI $current_Date.txt") -Scope script 

        #set counter
        Set-Variable -Name counter -Value 1 -Scope script
        Set-Variable -Name totalCount -Value 1 -Scope script
        Set-Variable -Name counterIndicator -Value 1 -Scope script
    
        Set-Variable -Name change -Value ("--CHANGE " + $counter) -Scope script
   
   }

   

}#end function


#save queries to a file
function saveToFile{

    Add-Content -Path $file -Value $script:spufi 

}#end function

#save SSN info to file
function saveSSNInfo{
    
    Clear-Content -Path "C:\Users\D0591\Documents\spufiInfo.txt"
        
    $ssnInfo | ForEach-Object { Add-Content -Path "C:\Users\D0591\Documents\spufiInfo.txt" -Value $_}
     
}#end function

#recover info from file
function loadSSNInfo{

    #get values from document
    $correctSSN = (Get-Content -Path "C:\Users\D0591\Documents\spufiInfo.txt" -TotalCount 8)[0]
     Set-Variable -Name correctSSN -Value $correctSSN  -Scope script
    $correctAgentID = (Get-Content -Path "C:\Users\D0591\Documents\spufiInfo.txt" -TotalCount 8)[1]
    Set-Variable -Name correctAgentID -Value  $correctAgentID -Scope script
    $correctClientID = (Get-Content -Path "C:\Users\D0591\Documents\spufiInfo.txt" -TotalCount 8)[2]
    Set-Variable -Name correctClientID -Value $correctClientID -Scope script
    if($script:bogusSSNFlag -ne 'y')
    {
        $incorrectSSN = (Get-Content -Path "C:\Users\D0591\Documents\spufiInfo.txt" -TotalCount 8)[3]
        Set-Variable -Name incorrectSSN -Value $incorrectSSN -Scope script
        $incorrectAgentID = (Get-Content -Path "C:\Users\D0591\Documents\spufiInfo.txt" -TotalCount 8)[4]
        Set-Variable -Name incorrectAgentID -Value $incorrectAgentID -Scope script
        $incorrectClientID = (Get-Content -Path "C:\Users\D0591\Documents\spufiInfo.txt" -TotalCount 8)[5]
        Set-Variable -Name incorrectClientID -Value $incorrectClientID -Scope script
        $oldFileNumber = (Get-Content -Path "C:\Users\D0591\Documents\spufiInfo.txt" -TotalCount 8)[6]
        Set-Variable -Name oldFileNumber -Value $oldFileNumber -Scope script
        $newFileNumber = (Get-Content -Path "C:\Users\D0591\Documents\spufiInfo.txt" -TotalCount 8)[7]
        Set-Variable -Name NewFileNumber -Value $newFileNumber -Scope script
    }
  
    Write-Host "`n`nCorrect SSN: $script:correctSSN" -ForegroundColor Green
    Write-Host "`nCorrect Agent ID: $script:correctAgentID" -ForegroundColor Green
    Write-Host "`nCorrect ClientID: $script:correctClientID" -ForegroundColor Green
    if($script:bogusSSNFlag -ne 'y')
    {
        Write-Host "`nIncorrect SSN: $script:incorrectSSN" -ForegroundColor Red
        Write-Host "`nIncorrect Agent ID: $script:incorrectAgentID" -ForegroundColor Red
        Write-Host "`nIncorrect Client ID: $script:incorrectClientID" -ForegroundColor Red
        Write-Host "`nOld File Number: $script:oldFileNumber" -ForegroundColor Red
        Write-Host "`nNew File Number: $script:newFileNumber" -ForegroundColor Green
    }#end if function
    
}#end function


###############################################################################################
#		BEGINING OF MAIN
###############################################################################################

showBanner
getCurrentDate
getUpdateDate
createFile
menuOptions


# End of script
